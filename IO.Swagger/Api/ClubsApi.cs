/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClubsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Club Activities
        /// </summary>
        /// <remarks>
        /// Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryActivity&gt;</returns>
        List<SummaryActivity> GetClubActivitiesById (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Club Activities
        /// </summary>
        /// <remarks>
        /// Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryActivity&gt;</returns>
        ApiResponse<List<SummaryActivity>> GetClubActivitiesByIdWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Club Administrators.
        /// </summary>
        /// <remarks>
        /// Returns a list of the administrators of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryAthlete&gt;</returns>
        List<SummaryAthlete> GetClubAdminsById (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Club Administrators.
        /// </summary>
        /// <remarks>
        /// Returns a list of the administrators of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryAthlete&gt;</returns>
        ApiResponse<List<SummaryAthlete>> GetClubAdminsByIdWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// Get Club
        /// </summary>
        /// <remarks>
        /// Returns a given club using its identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>DetailedClub</returns>
        DetailedClub GetClubById (int? id);

        /// <summary>
        /// Get Club
        /// </summary>
        /// <remarks>
        /// Returns a given club using its identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>ApiResponse of DetailedClub</returns>
        ApiResponse<DetailedClub> GetClubByIdWithHttpInfo (int? id);
        /// <summary>
        /// List Club Members
        /// </summary>
        /// <remarks>
        /// Returns a list of the athletes who are members of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryAthlete&gt;</returns>
        List<SummaryAthlete> GetClubMembersById (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Club Members
        /// </summary>
        /// <remarks>
        /// Returns a list of the athletes who are members of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryAthlete&gt;</returns>
        ApiResponse<List<SummaryAthlete>> GetClubMembersByIdWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Athlete Clubs
        /// </summary>
        /// <remarks>
        /// Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryClub&gt;</returns>
        List<SummaryClub> GetLoggedInAthleteClubs (int? page = null, int? perPage = null);

        /// <summary>
        /// List Athlete Clubs
        /// </summary>
        /// <remarks>
        /// Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryClub&gt;</returns>
        ApiResponse<List<SummaryClub>> GetLoggedInAthleteClubsWithHttpInfo (int? page = null, int? perPage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Club Activities
        /// </summary>
        /// <remarks>
        /// Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryActivity&gt;</returns>
        System.Threading.Tasks.Task<List<SummaryActivity>> GetClubActivitiesByIdAsync (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Club Activities
        /// </summary>
        /// <remarks>
        /// Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummaryActivity>>> GetClubActivitiesByIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Club Administrators.
        /// </summary>
        /// <remarks>
        /// Returns a list of the administrators of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryAthlete&gt;</returns>
        System.Threading.Tasks.Task<List<SummaryAthlete>> GetClubAdminsByIdAsync (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Club Administrators.
        /// </summary>
        /// <remarks>
        /// Returns a list of the administrators of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryAthlete&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummaryAthlete>>> GetClubAdminsByIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// Get Club
        /// </summary>
        /// <remarks>
        /// Returns a given club using its identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>Task of DetailedClub</returns>
        System.Threading.Tasks.Task<DetailedClub> GetClubByIdAsync (int? id);

        /// <summary>
        /// Get Club
        /// </summary>
        /// <remarks>
        /// Returns a given club using its identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>Task of ApiResponse (DetailedClub)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedClub>> GetClubByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// List Club Members
        /// </summary>
        /// <remarks>
        /// Returns a list of the athletes who are members of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryAthlete&gt;</returns>
        System.Threading.Tasks.Task<List<SummaryAthlete>> GetClubMembersByIdAsync (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Club Members
        /// </summary>
        /// <remarks>
        /// Returns a list of the athletes who are members of a given club.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryAthlete&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummaryAthlete>>> GetClubMembersByIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Athlete Clubs
        /// </summary>
        /// <remarks>
        /// Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryClub&gt;</returns>
        System.Threading.Tasks.Task<List<SummaryClub>> GetLoggedInAthleteClubsAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// List Athlete Clubs
        /// </summary>
        /// <remarks>
        /// Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryClub&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummaryClub>>> GetLoggedInAthleteClubsAsyncWithHttpInfo (int? page = null, int? perPage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClubsApi : IClubsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClubsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClubsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClubsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClubsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Club Activities Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryActivity&gt;</returns>
        public List<SummaryActivity> GetClubActivitiesById (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryActivity>> localVarResponse = GetClubActivitiesByIdWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Club Activities Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryActivity&gt;</returns>
        public ApiResponse< List<SummaryActivity> > GetClubActivitiesByIdWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubActivitiesById");

            var localVarPath = "/clubs/{id}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubActivitiesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryActivity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryActivity>)));
        }

        /// <summary>
        /// List Club Activities Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummaryActivity>> GetClubActivitiesByIdAsync (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryActivity>> localVarResponse = await GetClubActivitiesByIdAsyncWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Club Activities Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummaryActivity>>> GetClubActivitiesByIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubActivitiesById");

            var localVarPath = "/clubs/{id}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubActivitiesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryActivity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryActivity>)));
        }

        /// <summary>
        /// List Club Administrators. Returns a list of the administrators of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryAthlete&gt;</returns>
        public List<SummaryAthlete> GetClubAdminsById (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryAthlete>> localVarResponse = GetClubAdminsByIdWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Club Administrators. Returns a list of the administrators of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryAthlete&gt;</returns>
        public ApiResponse< List<SummaryAthlete> > GetClubAdminsByIdWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubAdminsById");

            var localVarPath = "/clubs/{id}/admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubAdminsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryAthlete>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryAthlete>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryAthlete>)));
        }

        /// <summary>
        /// List Club Administrators. Returns a list of the administrators of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryAthlete&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummaryAthlete>> GetClubAdminsByIdAsync (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryAthlete>> localVarResponse = await GetClubAdminsByIdAsyncWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Club Administrators. Returns a list of the administrators of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryAthlete&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummaryAthlete>>> GetClubAdminsByIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubAdminsById");

            var localVarPath = "/clubs/{id}/admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubAdminsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryAthlete>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryAthlete>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryAthlete>)));
        }

        /// <summary>
        /// Get Club Returns a given club using its identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>DetailedClub</returns>
        public DetailedClub GetClubById (int? id)
        {
             ApiResponse<DetailedClub> localVarResponse = GetClubByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Club Returns a given club using its identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>ApiResponse of DetailedClub</returns>
        public ApiResponse< DetailedClub > GetClubByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubById");

            var localVarPath = "/clubs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedClub>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedClub) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedClub)));
        }

        /// <summary>
        /// Get Club Returns a given club using its identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>Task of DetailedClub</returns>
        public async System.Threading.Tasks.Task<DetailedClub> GetClubByIdAsync (int? id)
        {
             ApiResponse<DetailedClub> localVarResponse = await GetClubByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Club Returns a given club using its identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <returns>Task of ApiResponse (DetailedClub)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedClub>> GetClubByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubById");

            var localVarPath = "/clubs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedClub>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedClub) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedClub)));
        }

        /// <summary>
        /// List Club Members Returns a list of the athletes who are members of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryAthlete&gt;</returns>
        public List<SummaryAthlete> GetClubMembersById (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryAthlete>> localVarResponse = GetClubMembersByIdWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Club Members Returns a list of the athletes who are members of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryAthlete&gt;</returns>
        public ApiResponse< List<SummaryAthlete> > GetClubMembersByIdWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubMembersById");

            var localVarPath = "/clubs/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubMembersById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryAthlete>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryAthlete>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryAthlete>)));
        }

        /// <summary>
        /// List Club Members Returns a list of the athletes who are members of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryAthlete&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummaryAthlete>> GetClubMembersByIdAsync (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryAthlete>> localVarResponse = await GetClubMembersByIdAsyncWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Club Members Returns a list of the athletes who are members of a given club.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the club.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryAthlete&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummaryAthlete>>> GetClubMembersByIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClubsApi->GetClubMembersById");

            var localVarPath = "/clubs/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClubMembersById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryAthlete>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryAthlete>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryAthlete>)));
        }

        /// <summary>
        /// List Athlete Clubs Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryClub&gt;</returns>
        public List<SummaryClub> GetLoggedInAthleteClubs (int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryClub>> localVarResponse = GetLoggedInAthleteClubsWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Athlete Clubs Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryClub&gt;</returns>
        public ApiResponse< List<SummaryClub> > GetLoggedInAthleteClubsWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/athlete/clubs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteClubs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryClub>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryClub>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryClub>)));
        }

        /// <summary>
        /// List Athlete Clubs Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryClub&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummaryClub>> GetLoggedInAthleteClubsAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryClub>> localVarResponse = await GetLoggedInAthleteClubsAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Athlete Clubs Returns a list of the clubs whose membership includes the authenticated athlete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryClub&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummaryClub>>> GetLoggedInAthleteClubsAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/athlete/clubs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteClubs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryClub>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryClub>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryClub>)));
        }

    }
}
