/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUploadsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Upload Activity
        /// </summary>
        /// <remarks>
        /// Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>Upload</returns>
        Upload CreateUpload (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null);

        /// <summary>
        /// Upload Activity
        /// </summary>
        /// <remarks>
        /// Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>ApiResponse of Upload</returns>
        ApiResponse<Upload> CreateUploadWithHttpInfo (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null);
        /// <summary>
        /// Get Upload
        /// </summary>
        /// <remarks>
        /// Returns an upload for a given identifier. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>Upload</returns>
        Upload GetUploadById (long? uploadId);

        /// <summary>
        /// Get Upload
        /// </summary>
        /// <remarks>
        /// Returns an upload for a given identifier. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>ApiResponse of Upload</returns>
        ApiResponse<Upload> GetUploadByIdWithHttpInfo (long? uploadId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Upload Activity
        /// </summary>
        /// <remarks>
        /// Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>Task of Upload</returns>
        System.Threading.Tasks.Task<Upload> CreateUploadAsync (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null);

        /// <summary>
        /// Upload Activity
        /// </summary>
        /// <remarks>
        /// Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>Task of ApiResponse (Upload)</returns>
        System.Threading.Tasks.Task<ApiResponse<Upload>> CreateUploadAsyncWithHttpInfo (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null);
        /// <summary>
        /// Get Upload
        /// </summary>
        /// <remarks>
        /// Returns an upload for a given identifier. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>Task of Upload</returns>
        System.Threading.Tasks.Task<Upload> GetUploadByIdAsync (long? uploadId);

        /// <summary>
        /// Get Upload
        /// </summary>
        /// <remarks>
        /// Returns an upload for a given identifier. Requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>Task of ApiResponse (Upload)</returns>
        System.Threading.Tasks.Task<ApiResponse<Upload>> GetUploadByIdAsyncWithHttpInfo (long? uploadId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UploadsApi : IUploadsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UploadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UploadsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UploadsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UploadsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Upload Activity Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>Upload</returns>
        public Upload CreateUpload (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null)
        {
             ApiResponse<Upload> localVarResponse = CreateUploadWithHttpInfo(file, name, description, trainer, commute, dataType, externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Activity Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>ApiResponse of Upload</returns>
        public ApiResponse< Upload > CreateUploadWithHttpInfo (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null)
        {

            var localVarPath = "/uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (trainer != null) localVarFormParams.Add("trainer", this.Configuration.ApiClient.ParameterToString(trainer)); // form parameter
            if (commute != null) localVarFormParams.Add("commute", this.Configuration.ApiClient.ParameterToString(commute)); // form parameter
            if (dataType != null) localVarFormParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // form parameter
            if (externalId != null) localVarFormParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // form parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Upload>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Upload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Upload)));
        }

        /// <summary>
        /// Upload Activity Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>Task of Upload</returns>
        public async System.Threading.Tasks.Task<Upload> CreateUploadAsync (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null)
        {
             ApiResponse<Upload> localVarResponse = await CreateUploadAsyncWithHttpInfo(file, name, description, trainer, commute, dataType, externalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload Activity Uploads a new data file to create an activity from. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The uploaded file. (optional)</param>
        /// <param name="name">The desired name of the resulting activity. (optional)</param>
        /// <param name="description">The desired description of the resulting activity. (optional)</param>
        /// <param name="trainer">Whether the resulting activity should be marked as having been performed on a trainer. (optional)</param>
        /// <param name="commute">Whether the resulting activity should be tagged as a commute. (optional)</param>
        /// <param name="dataType">The format of the uploaded file. (optional)</param>
        /// <param name="externalId">The desired external identifier of the resulting activity. (optional)</param>
        /// <returns>Task of ApiResponse (Upload)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Upload>> CreateUploadAsyncWithHttpInfo (System.IO.Stream file = null, string name = null, string description = null, string trainer = null, string commute = null, string dataType = null, string externalId = null)
        {

            var localVarPath = "/uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (trainer != null) localVarFormParams.Add("trainer", this.Configuration.ApiClient.ParameterToString(trainer)); // form parameter
            if (commute != null) localVarFormParams.Add("commute", this.Configuration.ApiClient.ParameterToString(commute)); // form parameter
            if (dataType != null) localVarFormParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // form parameter
            if (externalId != null) localVarFormParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // form parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Upload>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Upload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Upload)));
        }

        /// <summary>
        /// Get Upload Returns an upload for a given identifier. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>Upload</returns>
        public Upload GetUploadById (long? uploadId)
        {
             ApiResponse<Upload> localVarResponse = GetUploadByIdWithHttpInfo(uploadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Upload Returns an upload for a given identifier. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>ApiResponse of Upload</returns>
        public ApiResponse< Upload > GetUploadByIdWithHttpInfo (long? uploadId)
        {
            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
                throw new ApiException(400, "Missing required parameter 'uploadId' when calling UploadsApi->GetUploadById");

            var localVarPath = "/uploads/{uploadId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadId != null) localVarPathParams.Add("uploadId", this.Configuration.ApiClient.ParameterToString(uploadId)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUploadById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Upload>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Upload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Upload)));
        }

        /// <summary>
        /// Get Upload Returns an upload for a given identifier. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>Task of Upload</returns>
        public async System.Threading.Tasks.Task<Upload> GetUploadByIdAsync (long? uploadId)
        {
             ApiResponse<Upload> localVarResponse = await GetUploadByIdAsyncWithHttpInfo(uploadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Upload Returns an upload for a given identifier. Requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The identifier of the upload.</param>
        /// <returns>Task of ApiResponse (Upload)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Upload>> GetUploadByIdAsyncWithHttpInfo (long? uploadId)
        {
            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
                throw new ApiException(400, "Missing required parameter 'uploadId' when calling UploadsApi->GetUploadById");

            var localVarPath = "/uploads/{uploadId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadId != null) localVarPathParams.Add("uploadId", this.Configuration.ApiClient.ParameterToString(uploadId)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUploadById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Upload>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Upload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Upload)));
        }

    }
}
