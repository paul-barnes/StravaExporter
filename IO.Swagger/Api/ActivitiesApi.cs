/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Activity
        /// </summary>
        /// <remarks>
        /// Creates a manual activity for an athlete, requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>DetailedActivity</returns>
        DetailedActivity CreateActivity (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null);

        /// <summary>
        /// Create an Activity
        /// </summary>
        /// <remarks>
        /// Creates a manual activity for an athlete, requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>ApiResponse of DetailedActivity</returns>
        ApiResponse<DetailedActivity> CreateActivityWithHttpInfo (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null);
        /// <summary>
        /// Get Activity
        /// </summary>
        /// <remarks>
        /// Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>DetailedActivity</returns>
        DetailedActivity GetActivityById (long? id, bool? includeAllEfforts = null);

        /// <summary>
        /// Get Activity
        /// </summary>
        /// <remarks>
        /// Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>ApiResponse of DetailedActivity</returns>
        ApiResponse<DetailedActivity> GetActivityByIdWithHttpInfo (long? id, bool? includeAllEfforts = null);
        /// <summary>
        /// List Activity Comments
        /// </summary>
        /// <remarks>
        /// Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;Comment&gt;</returns>
        List<Comment> GetCommentsByActivityId (long? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Activity Comments
        /// </summary>
        /// <remarks>
        /// Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;Comment&gt;</returns>
        ApiResponse<List<Comment>> GetCommentsByActivityIdWithHttpInfo (long? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Activity Kudoers
        /// </summary>
        /// <remarks>
        /// Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryAthlete&gt;</returns>
        List<SummaryAthlete> GetKudoersByActivityId (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Activity Kudoers
        /// </summary>
        /// <remarks>
        /// Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryAthlete&gt;</returns>
        ApiResponse<List<SummaryAthlete>> GetKudoersByActivityIdWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Activity Laps
        /// </summary>
        /// <remarks>
        /// Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>List&lt;Lap&gt;</returns>
        List<Lap> GetLapsByActivityId (long? id);

        /// <summary>
        /// List Activity Laps
        /// </summary>
        /// <remarks>
        /// Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>ApiResponse of List&lt;Lap&gt;</returns>
        ApiResponse<List<Lap>> GetLapsByActivityIdWithHttpInfo (long? id);
        /// <summary>
        /// List Athlete Activities
        /// </summary>
        /// <remarks>
        /// Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryActivity&gt;</returns>
        List<SummaryActivity> GetLoggedInAthleteActivities (int? before = null, int? after = null, int? page = null, int? perPage = null);

        /// <summary>
        /// List Athlete Activities
        /// </summary>
        /// <remarks>
        /// Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryActivity&gt;</returns>
        ApiResponse<List<SummaryActivity>> GetLoggedInAthleteActivitiesWithHttpInfo (int? before = null, int? after = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Get Activity Zones
        /// </summary>
        /// <remarks>
        /// Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>List&lt;ActivityZone&gt;</returns>
        List<ActivityZone> GetZonesByActivityId (int? id);

        /// <summary>
        /// Get Activity Zones
        /// </summary>
        /// <remarks>
        /// Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>ApiResponse of List&lt;ActivityZone&gt;</returns>
        ApiResponse<List<ActivityZone>> GetZonesByActivityIdWithHttpInfo (int? id);
        /// <summary>
        /// Update Activity
        /// </summary>
        /// <remarks>
        /// Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DetailedActivity</returns>
        DetailedActivity UpdateActivityById (long? id, UpdatableActivity body = null);

        /// <summary>
        /// Update Activity
        /// </summary>
        /// <remarks>
        /// Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DetailedActivity</returns>
        ApiResponse<DetailedActivity> UpdateActivityByIdWithHttpInfo (long? id, UpdatableActivity body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Activity
        /// </summary>
        /// <remarks>
        /// Creates a manual activity for an athlete, requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>Task of DetailedActivity</returns>
        System.Threading.Tasks.Task<DetailedActivity> CreateActivityAsync (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null);

        /// <summary>
        /// Create an Activity
        /// </summary>
        /// <remarks>
        /// Creates a manual activity for an athlete, requires activity:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>Task of ApiResponse (DetailedActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedActivity>> CreateActivityAsyncWithHttpInfo (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null);
        /// <summary>
        /// Get Activity
        /// </summary>
        /// <remarks>
        /// Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>Task of DetailedActivity</returns>
        System.Threading.Tasks.Task<DetailedActivity> GetActivityByIdAsync (long? id, bool? includeAllEfforts = null);

        /// <summary>
        /// Get Activity
        /// </summary>
        /// <remarks>
        /// Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>Task of ApiResponse (DetailedActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedActivity>> GetActivityByIdAsyncWithHttpInfo (long? id, bool? includeAllEfforts = null);
        /// <summary>
        /// List Activity Comments
        /// </summary>
        /// <remarks>
        /// Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;Comment&gt;</returns>
        System.Threading.Tasks.Task<List<Comment>> GetCommentsByActivityIdAsync (long? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Activity Comments
        /// </summary>
        /// <remarks>
        /// Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;Comment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Comment>>> GetCommentsByActivityIdAsyncWithHttpInfo (long? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Activity Kudoers
        /// </summary>
        /// <remarks>
        /// Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryAthlete&gt;</returns>
        System.Threading.Tasks.Task<List<SummaryAthlete>> GetKudoersByActivityIdAsync (int? id, int? page = null, int? perPage = null);

        /// <summary>
        /// List Activity Kudoers
        /// </summary>
        /// <remarks>
        /// Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryAthlete&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummaryAthlete>>> GetKudoersByActivityIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null);
        /// <summary>
        /// List Activity Laps
        /// </summary>
        /// <remarks>
        /// Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of List&lt;Lap&gt;</returns>
        System.Threading.Tasks.Task<List<Lap>> GetLapsByActivityIdAsync (long? id);

        /// <summary>
        /// List Activity Laps
        /// </summary>
        /// <remarks>
        /// Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of ApiResponse (List&lt;Lap&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Lap>>> GetLapsByActivityIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List Athlete Activities
        /// </summary>
        /// <remarks>
        /// Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryActivity&gt;</returns>
        System.Threading.Tasks.Task<List<SummaryActivity>> GetLoggedInAthleteActivitiesAsync (int? before = null, int? after = null, int? page = null, int? perPage = null);

        /// <summary>
        /// List Athlete Activities
        /// </summary>
        /// <remarks>
        /// Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummaryActivity>>> GetLoggedInAthleteActivitiesAsyncWithHttpInfo (int? before = null, int? after = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Get Activity Zones
        /// </summary>
        /// <remarks>
        /// Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of List&lt;ActivityZone&gt;</returns>
        System.Threading.Tasks.Task<List<ActivityZone>> GetZonesByActivityIdAsync (int? id);

        /// <summary>
        /// Get Activity Zones
        /// </summary>
        /// <remarks>
        /// Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityZone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivityZone>>> GetZonesByActivityIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Update Activity
        /// </summary>
        /// <remarks>
        /// Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DetailedActivity</returns>
        System.Threading.Tasks.Task<DetailedActivity> UpdateActivityByIdAsync (long? id, UpdatableActivity body = null);

        /// <summary>
        /// Update Activity
        /// </summary>
        /// <remarks>
        /// Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DetailedActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedActivity>> UpdateActivityByIdAsyncWithHttpInfo (long? id, UpdatableActivity body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActivitiesApi : IActivitiesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivitiesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActivitiesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an Activity Creates a manual activity for an athlete, requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>DetailedActivity</returns>
        public DetailedActivity CreateActivity (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null)
        {
             ApiResponse<DetailedActivity> localVarResponse = CreateActivityWithHttpInfo(name, type, startDateLocal, elapsedTime, description, distance, trainer, photoIds, commute);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Activity Creates a manual activity for an athlete, requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>ApiResponse of DetailedActivity</returns>
        public ApiResponse< DetailedActivity > CreateActivityWithHttpInfo (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ActivitiesApi->CreateActivity");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ActivitiesApi->CreateActivity");
            // verify the required parameter 'startDateLocal' is set
            if (startDateLocal == null)
                throw new ApiException(400, "Missing required parameter 'startDateLocal' when calling ActivitiesApi->CreateActivity");
            // verify the required parameter 'elapsedTime' is set
            if (elapsedTime == null)
                throw new ApiException(400, "Missing required parameter 'elapsedTime' when calling ActivitiesApi->CreateActivity");

            var localVarPath = "/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (startDateLocal != null) localVarFormParams.Add("start_date_local", this.Configuration.ApiClient.ParameterToString(startDateLocal)); // form parameter
            if (elapsedTime != null) localVarFormParams.Add("elapsed_time", this.Configuration.ApiClient.ParameterToString(elapsedTime)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (distance != null) localVarFormParams.Add("distance", this.Configuration.ApiClient.ParameterToString(distance)); // form parameter
            if (trainer != null) localVarFormParams.Add("trainer", this.Configuration.ApiClient.ParameterToString(trainer)); // form parameter
            if (photoIds != null) localVarFormParams.Add("photo_ids", this.Configuration.ApiClient.ParameterToString(photoIds)); // form parameter
            if (commute != null) localVarFormParams.Add("commute", this.Configuration.ApiClient.ParameterToString(commute)); // form parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedActivity)));
        }

        /// <summary>
        /// Create an Activity Creates a manual activity for an athlete, requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>Task of DetailedActivity</returns>
        public async System.Threading.Tasks.Task<DetailedActivity> CreateActivityAsync (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null)
        {
             ApiResponse<DetailedActivity> localVarResponse = await CreateActivityAsyncWithHttpInfo(name, type, startDateLocal, elapsedTime, description, distance, trainer, photoIds, commute);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Activity Creates a manual activity for an athlete, requires activity:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc.</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time.</param>
        /// <param name="elapsedTime">In seconds.</param>
        /// <param name="description">Description of the activity. (optional)</param>
        /// <param name="distance">In meters. (optional)</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity. (optional)</param>
        /// <param name="photoIds">List of native photo ids to attach to the activity. (optional)</param>
        /// <param name="commute">Set to 1 to mark as commute. (optional)</param>
        /// <returns>Task of ApiResponse (DetailedActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedActivity>> CreateActivityAsyncWithHttpInfo (string name, string type, Object startDateLocal, int? elapsedTime, string description = null, float? distance = null, int? trainer = null, Object photoIds = null, int? commute = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ActivitiesApi->CreateActivity");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ActivitiesApi->CreateActivity");
            // verify the required parameter 'startDateLocal' is set
            if (startDateLocal == null)
                throw new ApiException(400, "Missing required parameter 'startDateLocal' when calling ActivitiesApi->CreateActivity");
            // verify the required parameter 'elapsedTime' is set
            if (elapsedTime == null)
                throw new ApiException(400, "Missing required parameter 'elapsedTime' when calling ActivitiesApi->CreateActivity");

            var localVarPath = "/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (startDateLocal != null) localVarFormParams.Add("start_date_local", this.Configuration.ApiClient.ParameterToString(startDateLocal)); // form parameter
            if (elapsedTime != null) localVarFormParams.Add("elapsed_time", this.Configuration.ApiClient.ParameterToString(elapsedTime)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (distance != null) localVarFormParams.Add("distance", this.Configuration.ApiClient.ParameterToString(distance)); // form parameter
            if (trainer != null) localVarFormParams.Add("trainer", this.Configuration.ApiClient.ParameterToString(trainer)); // form parameter
            if (photoIds != null) localVarFormParams.Add("photo_ids", this.Configuration.ApiClient.ParameterToString(photoIds)); // form parameter
            if (commute != null) localVarFormParams.Add("commute", this.Configuration.ApiClient.ParameterToString(commute)); // form parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedActivity)));
        }

        /// <summary>
        /// Get Activity Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>DetailedActivity</returns>
        public DetailedActivity GetActivityById (long? id, bool? includeAllEfforts = null)
        {
             ApiResponse<DetailedActivity> localVarResponse = GetActivityByIdWithHttpInfo(id, includeAllEfforts);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>ApiResponse of DetailedActivity</returns>
        public ApiResponse< DetailedActivity > GetActivityByIdWithHttpInfo (long? id, bool? includeAllEfforts = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetActivityById");

            var localVarPath = "/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeAllEfforts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_all_efforts", includeAllEfforts)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedActivity)));
        }

        /// <summary>
        /// Get Activity Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>Task of DetailedActivity</returns>
        public async System.Threading.Tasks.Task<DetailedActivity> GetActivityByIdAsync (long? id, bool? includeAllEfforts = null)
        {
             ApiResponse<DetailedActivity> localVarResponse = await GetActivityByIdAsyncWithHttpInfo(id, includeAllEfforts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts. (optional)</param>
        /// <returns>Task of ApiResponse (DetailedActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedActivity>> GetActivityByIdAsyncWithHttpInfo (long? id, bool? includeAllEfforts = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetActivityById");

            var localVarPath = "/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeAllEfforts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_all_efforts", includeAllEfforts)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedActivity)));
        }

        /// <summary>
        /// List Activity Comments Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;Comment&gt;</returns>
        public List<Comment> GetCommentsByActivityId (long? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Comment>> localVarResponse = GetCommentsByActivityIdWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Activity Comments Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;Comment&gt;</returns>
        public ApiResponse< List<Comment> > GetCommentsByActivityIdWithHttpInfo (long? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetCommentsByActivityId");

            var localVarPath = "/activities/{id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentsByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Comment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Comment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Comment>)));
        }

        /// <summary>
        /// List Activity Comments Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;Comment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Comment>> GetCommentsByActivityIdAsync (long? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Comment>> localVarResponse = await GetCommentsByActivityIdAsyncWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Activity Comments Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;Comment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Comment>>> GetCommentsByActivityIdAsyncWithHttpInfo (long? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetCommentsByActivityId");

            var localVarPath = "/activities/{id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentsByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Comment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Comment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Comment>)));
        }

        /// <summary>
        /// List Activity Kudoers Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryAthlete&gt;</returns>
        public List<SummaryAthlete> GetKudoersByActivityId (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryAthlete>> localVarResponse = GetKudoersByActivityIdWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Activity Kudoers Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryAthlete&gt;</returns>
        public ApiResponse< List<SummaryAthlete> > GetKudoersByActivityIdWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetKudoersByActivityId");

            var localVarPath = "/activities/{id}/kudos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKudoersByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryAthlete>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryAthlete>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryAthlete>)));
        }

        /// <summary>
        /// List Activity Kudoers Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryAthlete&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummaryAthlete>> GetKudoersByActivityIdAsync (int? id, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryAthlete>> localVarResponse = await GetKudoersByActivityIdAsyncWithHttpInfo(id, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Activity Kudoers Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryAthlete&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummaryAthlete>>> GetKudoersByActivityIdAsyncWithHttpInfo (int? id, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetKudoersByActivityId");

            var localVarPath = "/activities/{id}/kudos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKudoersByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryAthlete>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryAthlete>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryAthlete>)));
        }

        /// <summary>
        /// List Activity Laps Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>List&lt;Lap&gt;</returns>
        public List<Lap> GetLapsByActivityId (long? id)
        {
             ApiResponse<List<Lap>> localVarResponse = GetLapsByActivityIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Activity Laps Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>ApiResponse of List&lt;Lap&gt;</returns>
        public ApiResponse< List<Lap> > GetLapsByActivityIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetLapsByActivityId");

            var localVarPath = "/activities/{id}/laps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLapsByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Lap>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Lap>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Lap>)));
        }

        /// <summary>
        /// List Activity Laps Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of List&lt;Lap&gt;</returns>
        public async System.Threading.Tasks.Task<List<Lap>> GetLapsByActivityIdAsync (long? id)
        {
             ApiResponse<List<Lap>> localVarResponse = await GetLapsByActivityIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Activity Laps Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of ApiResponse (List&lt;Lap&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Lap>>> GetLapsByActivityIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetLapsByActivityId");

            var localVarPath = "/activities/{id}/laps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLapsByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Lap>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Lap>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Lap>)));
        }

        /// <summary>
        /// List Athlete Activities Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummaryActivity&gt;</returns>
        public List<SummaryActivity> GetLoggedInAthleteActivities (int? before = null, int? after = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryActivity>> localVarResponse = GetLoggedInAthleteActivitiesWithHttpInfo(before, after, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Athlete Activities Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummaryActivity&gt;</returns>
        public ApiResponse< List<SummaryActivity> > GetLoggedInAthleteActivitiesWithHttpInfo (int? before = null, int? after = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/athlete/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryActivity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryActivity>)));
        }

        /// <summary>
        /// List Athlete Activities Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummaryActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummaryActivity>> GetLoggedInAthleteActivitiesAsync (int? before = null, int? after = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummaryActivity>> localVarResponse = await GetLoggedInAthleteActivitiesAsyncWithHttpInfo(before, after, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Athlete Activities Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummaryActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummaryActivity>>> GetLoggedInAthleteActivitiesAsyncWithHttpInfo (int? before = null, int? after = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/athlete/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummaryActivity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryActivity>)));
        }

        /// <summary>
        /// Get Activity Zones Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>List&lt;ActivityZone&gt;</returns>
        public List<ActivityZone> GetZonesByActivityId (int? id)
        {
             ApiResponse<List<ActivityZone>> localVarResponse = GetZonesByActivityIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Zones Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>ApiResponse of List&lt;ActivityZone&gt;</returns>
        public ApiResponse< List<ActivityZone> > GetZonesByActivityIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetZonesByActivityId");

            var localVarPath = "/activities/{id}/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZonesByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityZone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ActivityZone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityZone>)));
        }

        /// <summary>
        /// Get Activity Zones Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of List&lt;ActivityZone&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivityZone>> GetZonesByActivityIdAsync (int? id)
        {
             ApiResponse<List<ActivityZone>> localVarResponse = await GetZonesByActivityIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Zones Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityZone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ActivityZone>>> GetZonesByActivityIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetZonesByActivityId");

            var localVarPath = "/activities/{id}/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZonesByActivityId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityZone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ActivityZone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityZone>)));
        }

        /// <summary>
        /// Update Activity Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DetailedActivity</returns>
        public DetailedActivity UpdateActivityById (long? id, UpdatableActivity body = null)
        {
             ApiResponse<DetailedActivity> localVarResponse = UpdateActivityByIdWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Activity Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DetailedActivity</returns>
        public ApiResponse< DetailedActivity > UpdateActivityByIdWithHttpInfo (long? id, UpdatableActivity body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->UpdateActivityById");

            var localVarPath = "/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedActivity)));
        }

        /// <summary>
        /// Update Activity Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DetailedActivity</returns>
        public async System.Threading.Tasks.Task<DetailedActivity> UpdateActivityByIdAsync (long? id, UpdatableActivity body = null)
        {
             ApiResponse<DetailedActivity> localVarResponse = await UpdateActivityByIdAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Activity Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DetailedActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedActivity>> UpdateActivityByIdAsyncWithHttpInfo (long? id, UpdatableActivity body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->UpdateActivityById");

            var localVarPath = "/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedActivity)));
        }

    }
}
