/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Activity Streams
        /// </summary>
        /// <remarks>
        /// Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>StreamSet</returns>
        StreamSet GetActivityStreams (long? id, List<string> keys, bool? keyByType);

        /// <summary>
        /// Get Activity Streams
        /// </summary>
        /// <remarks>
        /// Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        ApiResponse<StreamSet> GetActivityStreamsWithHttpInfo (long? id, List<string> keys, bool? keyByType);
        /// <summary>
        /// Get Route Streams
        /// </summary>
        /// <remarks>
        /// Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>StreamSet</returns>
        StreamSet GetRouteStreams (long? id);

        /// <summary>
        /// Get Route Streams
        /// </summary>
        /// <remarks>
        /// Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        ApiResponse<StreamSet> GetRouteStreamsWithHttpInfo (long? id);
        /// <summary>
        /// Get Segment Effort Streams
        /// </summary>
        /// <remarks>
        /// Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>StreamSet</returns>
        StreamSet GetSegmentEffortStreams (long? id, List<string> keys, bool? keyByType);

        /// <summary>
        /// Get Segment Effort Streams
        /// </summary>
        /// <remarks>
        /// Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        ApiResponse<StreamSet> GetSegmentEffortStreamsWithHttpInfo (long? id, List<string> keys, bool? keyByType);
        /// <summary>
        /// Get Segment Streams
        /// </summary>
        /// <remarks>
        /// Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>StreamSet</returns>
        StreamSet GetSegmentStreams (long? id, List<string> keys, bool? keyByType);

        /// <summary>
        /// Get Segment Streams
        /// </summary>
        /// <remarks>
        /// Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        ApiResponse<StreamSet> GetSegmentStreamsWithHttpInfo (long? id, List<string> keys, bool? keyByType);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Activity Streams
        /// </summary>
        /// <remarks>
        /// Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of StreamSet</returns>
        System.Threading.Tasks.Task<StreamSet> GetActivityStreamsAsync (long? id, List<string> keys, bool? keyByType);

        /// <summary>
        /// Get Activity Streams
        /// </summary>
        /// <remarks>
        /// Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetActivityStreamsAsyncWithHttpInfo (long? id, List<string> keys, bool? keyByType);
        /// <summary>
        /// Get Route Streams
        /// </summary>
        /// <remarks>
        /// Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>Task of StreamSet</returns>
        System.Threading.Tasks.Task<StreamSet> GetRouteStreamsAsync (long? id);

        /// <summary>
        /// Get Route Streams
        /// </summary>
        /// <remarks>
        /// Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetRouteStreamsAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get Segment Effort Streams
        /// </summary>
        /// <remarks>
        /// Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of StreamSet</returns>
        System.Threading.Tasks.Task<StreamSet> GetSegmentEffortStreamsAsync (long? id, List<string> keys, bool? keyByType);

        /// <summary>
        /// Get Segment Effort Streams
        /// </summary>
        /// <remarks>
        /// Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetSegmentEffortStreamsAsyncWithHttpInfo (long? id, List<string> keys, bool? keyByType);
        /// <summary>
        /// Get Segment Streams
        /// </summary>
        /// <remarks>
        /// Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of StreamSet</returns>
        System.Threading.Tasks.Task<StreamSet> GetSegmentStreamsAsync (long? id, List<string> keys, bool? keyByType);

        /// <summary>
        /// Get Segment Streams
        /// </summary>
        /// <remarks>
        /// Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetSegmentStreamsAsyncWithHttpInfo (long? id, List<string> keys, bool? keyByType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreamsApi : IStreamsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreamsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreamsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Activity Streams Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>StreamSet</returns>
        public StreamSet GetActivityStreams (long? id, List<string> keys, bool? keyByType)
        {
             ApiResponse<StreamSet> localVarResponse = GetActivityStreamsWithHttpInfo(id, keys, keyByType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Streams Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        public ApiResponse< StreamSet > GetActivityStreamsWithHttpInfo (long? id, List<string> keys, bool? keyByType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetActivityStreams");
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling StreamsApi->GetActivityStreams");
            // verify the required parameter 'keyByType' is set
            if (keyByType == null)
                throw new ApiException(400, "Missing required parameter 'keyByType' when calling StreamsApi->GetActivityStreams");

            var localVarPath = "/activities/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keys", keys)); // query parameter
            if (keyByType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_by_type", keyByType)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

        /// <summary>
        /// Get Activity Streams Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of StreamSet</returns>
        public async System.Threading.Tasks.Task<StreamSet> GetActivityStreamsAsync (long? id, List<string> keys, bool? keyByType)
        {
             ApiResponse<StreamSet> localVarResponse = await GetActivityStreamsAsyncWithHttpInfo(id, keys, keyByType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Streams Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetActivityStreamsAsyncWithHttpInfo (long? id, List<string> keys, bool? keyByType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetActivityStreams");
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling StreamsApi->GetActivityStreams");
            // verify the required parameter 'keyByType' is set
            if (keyByType == null)
                throw new ApiException(400, "Missing required parameter 'keyByType' when calling StreamsApi->GetActivityStreams");

            var localVarPath = "/activities/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keys", keys)); // query parameter
            if (keyByType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_by_type", keyByType)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

        /// <summary>
        /// Get Route Streams Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>StreamSet</returns>
        public StreamSet GetRouteStreams (long? id)
        {
             ApiResponse<StreamSet> localVarResponse = GetRouteStreamsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Route Streams Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        public ApiResponse< StreamSet > GetRouteStreamsWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetRouteStreams");

            var localVarPath = "/routes/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

        /// <summary>
        /// Get Route Streams Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>Task of StreamSet</returns>
        public async System.Threading.Tasks.Task<StreamSet> GetRouteStreamsAsync (long? id)
        {
             ApiResponse<StreamSet> localVarResponse = await GetRouteStreamsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Route Streams Returns the given route&#39;s streams. Requires read_all scope for private routes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the route.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetRouteStreamsAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetRouteStreams");

            var localVarPath = "/routes/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

        /// <summary>
        /// Get Segment Effort Streams Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>StreamSet</returns>
        public StreamSet GetSegmentEffortStreams (long? id, List<string> keys, bool? keyByType)
        {
             ApiResponse<StreamSet> localVarResponse = GetSegmentEffortStreamsWithHttpInfo(id, keys, keyByType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Segment Effort Streams Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        public ApiResponse< StreamSet > GetSegmentEffortStreamsWithHttpInfo (long? id, List<string> keys, bool? keyByType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetSegmentEffortStreams");
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling StreamsApi->GetSegmentEffortStreams");
            // verify the required parameter 'keyByType' is set
            if (keyByType == null)
                throw new ApiException(400, "Missing required parameter 'keyByType' when calling StreamsApi->GetSegmentEffortStreams");

            var localVarPath = "/segment_efforts/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keys", keys)); // query parameter
            if (keyByType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_by_type", keyByType)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentEffortStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

        /// <summary>
        /// Get Segment Effort Streams Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of StreamSet</returns>
        public async System.Threading.Tasks.Task<StreamSet> GetSegmentEffortStreamsAsync (long? id, List<string> keys, bool? keyByType)
        {
             ApiResponse<StreamSet> localVarResponse = await GetSegmentEffortStreamsAsyncWithHttpInfo(id, keys, keyByType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Segment Effort Streams Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetSegmentEffortStreamsAsyncWithHttpInfo (long? id, List<string> keys, bool? keyByType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetSegmentEffortStreams");
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling StreamsApi->GetSegmentEffortStreams");
            // verify the required parameter 'keyByType' is set
            if (keyByType == null)
                throw new ApiException(400, "Missing required parameter 'keyByType' when calling StreamsApi->GetSegmentEffortStreams");

            var localVarPath = "/segment_efforts/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keys", keys)); // query parameter
            if (keyByType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_by_type", keyByType)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentEffortStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

        /// <summary>
        /// Get Segment Streams Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>StreamSet</returns>
        public StreamSet GetSegmentStreams (long? id, List<string> keys, bool? keyByType)
        {
             ApiResponse<StreamSet> localVarResponse = GetSegmentStreamsWithHttpInfo(id, keys, keyByType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Segment Streams Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>ApiResponse of StreamSet</returns>
        public ApiResponse< StreamSet > GetSegmentStreamsWithHttpInfo (long? id, List<string> keys, bool? keyByType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetSegmentStreams");
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling StreamsApi->GetSegmentStreams");
            // verify the required parameter 'keyByType' is set
            if (keyByType == null)
                throw new ApiException(400, "Missing required parameter 'keyByType' when calling StreamsApi->GetSegmentStreams");

            var localVarPath = "/segments/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keys", keys)); // query parameter
            if (keyByType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_by_type", keyByType)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

        /// <summary>
        /// Get Segment Streams Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of StreamSet</returns>
        public async System.Threading.Tasks.Task<StreamSet> GetSegmentStreamsAsync (long? id, List<string> keys, bool? keyByType)
        {
             ApiResponse<StreamSet> localVarResponse = await GetSegmentStreamsAsyncWithHttpInfo(id, keys, keyByType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Segment Streams Returns the given segment&#39;s streams. Requires read_all scope for private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <returns>Task of ApiResponse (StreamSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamSet>> GetSegmentStreamsAsyncWithHttpInfo (long? id, List<string> keys, bool? keyByType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->GetSegmentStreams");
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling StreamsApi->GetSegmentStreams");
            // verify the required parameter 'keyByType' is set
            if (keyByType == null)
                throw new ApiException(400, "Missing required parameter 'keyByType' when calling StreamsApi->GetSegmentStreams");

            var localVarPath = "/segments/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keys", keys)); // query parameter
            if (keyByType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_by_type", keyByType)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSet)));
        }

    }
}
