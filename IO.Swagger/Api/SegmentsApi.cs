/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Explore segments
        /// </summary>
        /// <remarks>
        /// Returns the top 10 segments matching a specified query.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>ExplorerResponse</returns>
        ExplorerResponse ExploreSegments (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null);

        /// <summary>
        /// Explore segments
        /// </summary>
        /// <remarks>
        /// Returns the top 10 segments matching a specified query.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>ApiResponse of ExplorerResponse</returns>
        ApiResponse<ExplorerResponse> ExploreSegmentsWithHttpInfo (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null);
        /// <summary>
        /// Get Segment Leaderboard
        /// </summary>
        /// <remarks>
        /// Returns the specified segment leaderboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>SegmentLeaderboard</returns>
        SegmentLeaderboard GetLeaderboardBySegmentId (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get Segment Leaderboard
        /// </summary>
        /// <remarks>
        /// Returns the specified segment leaderboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of SegmentLeaderboard</returns>
        ApiResponse<SegmentLeaderboard> GetLeaderboardBySegmentIdWithHttpInfo (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null);
        /// <summary>
        /// List Starred Segments
        /// </summary>
        /// <remarks>
        /// List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummarySegment&gt;</returns>
        List<SummarySegment> GetLoggedInAthleteStarredSegments (int? page = null, int? perPage = null);

        /// <summary>
        /// List Starred Segments
        /// </summary>
        /// <remarks>
        /// List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummarySegment&gt;</returns>
        ApiResponse<List<SummarySegment>> GetLoggedInAthleteStarredSegmentsWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// Get Segment
        /// </summary>
        /// <remarks>
        /// Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>DetailedSegment</returns>
        DetailedSegment GetSegmentById (long? id);

        /// <summary>
        /// Get Segment
        /// </summary>
        /// <remarks>
        /// Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>ApiResponse of DetailedSegment</returns>
        ApiResponse<DetailedSegment> GetSegmentByIdWithHttpInfo (long? id);
        /// <summary>
        /// Star Segment
        /// </summary>
        /// <remarks>
        /// Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>DetailedSegment</returns>
        DetailedSegment StarSegment (long? id, bool? starred);

        /// <summary>
        /// Star Segment
        /// </summary>
        /// <remarks>
        /// Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>ApiResponse of DetailedSegment</returns>
        ApiResponse<DetailedSegment> StarSegmentWithHttpInfo (long? id, bool? starred);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Explore segments
        /// </summary>
        /// <remarks>
        /// Returns the top 10 segments matching a specified query.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>Task of ExplorerResponse</returns>
        System.Threading.Tasks.Task<ExplorerResponse> ExploreSegmentsAsync (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null);

        /// <summary>
        /// Explore segments
        /// </summary>
        /// <remarks>
        /// Returns the top 10 segments matching a specified query.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>Task of ApiResponse (ExplorerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExplorerResponse>> ExploreSegmentsAsyncWithHttpInfo (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null);
        /// <summary>
        /// Get Segment Leaderboard
        /// </summary>
        /// <remarks>
        /// Returns the specified segment leaderboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of SegmentLeaderboard</returns>
        System.Threading.Tasks.Task<SegmentLeaderboard> GetLeaderboardBySegmentIdAsync (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get Segment Leaderboard
        /// </summary>
        /// <remarks>
        /// Returns the specified segment leaderboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (SegmentLeaderboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<SegmentLeaderboard>> GetLeaderboardBySegmentIdAsyncWithHttpInfo (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null);
        /// <summary>
        /// List Starred Segments
        /// </summary>
        /// <remarks>
        /// List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummarySegment&gt;</returns>
        System.Threading.Tasks.Task<List<SummarySegment>> GetLoggedInAthleteStarredSegmentsAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// List Starred Segments
        /// </summary>
        /// <remarks>
        /// List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummarySegment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummarySegment>>> GetLoggedInAthleteStarredSegmentsAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// Get Segment
        /// </summary>
        /// <remarks>
        /// Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>Task of DetailedSegment</returns>
        System.Threading.Tasks.Task<DetailedSegment> GetSegmentByIdAsync (long? id);

        /// <summary>
        /// Get Segment
        /// </summary>
        /// <remarks>
        /// Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>Task of ApiResponse (DetailedSegment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedSegment>> GetSegmentByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Star Segment
        /// </summary>
        /// <remarks>
        /// Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>Task of DetailedSegment</returns>
        System.Threading.Tasks.Task<DetailedSegment> StarSegmentAsync (long? id, bool? starred);

        /// <summary>
        /// Star Segment
        /// </summary>
        /// <remarks>
        /// Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>Task of ApiResponse (DetailedSegment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedSegment>> StarSegmentAsyncWithHttpInfo (long? id, bool? starred);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SegmentsApi : ISegmentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SegmentsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SegmentsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Explore segments Returns the top 10 segments matching a specified query.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>ExplorerResponse</returns>
        public ExplorerResponse ExploreSegments (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null)
        {
             ApiResponse<ExplorerResponse> localVarResponse = ExploreSegmentsWithHttpInfo(bounds, activityType, minCat, maxCat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Explore segments Returns the top 10 segments matching a specified query.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>ApiResponse of ExplorerResponse</returns>
        public ApiResponse< ExplorerResponse > ExploreSegmentsWithHttpInfo (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null)
        {
            // verify the required parameter 'bounds' is set
            if (bounds == null)
                throw new ApiException(400, "Missing required parameter 'bounds' when calling SegmentsApi->ExploreSegments");

            var localVarPath = "/segments/explore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "bounds", bounds)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (minCat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_cat", minCat)); // query parameter
            if (maxCat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_cat", maxCat)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExploreSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExplorerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExplorerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExplorerResponse)));
        }

        /// <summary>
        /// Explore segments Returns the top 10 segments matching a specified query.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>Task of ExplorerResponse</returns>
        public async System.Threading.Tasks.Task<ExplorerResponse> ExploreSegmentsAsync (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null)
        {
             ApiResponse<ExplorerResponse> localVarResponse = await ExploreSegmentsAsyncWithHttpInfo(bounds, activityType, minCat, maxCat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Explore segments Returns the top 10 segments matching a specified query.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type. (optional)</param>
        /// <param name="minCat">The minimum climbing category. (optional)</param>
        /// <param name="maxCat">The maximum climbing category. (optional)</param>
        /// <returns>Task of ApiResponse (ExplorerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExplorerResponse>> ExploreSegmentsAsyncWithHttpInfo (List<float?> bounds, string activityType = null, int? minCat = null, int? maxCat = null)
        {
            // verify the required parameter 'bounds' is set
            if (bounds == null)
                throw new ApiException(400, "Missing required parameter 'bounds' when calling SegmentsApi->ExploreSegments");

            var localVarPath = "/segments/explore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "bounds", bounds)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (minCat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_cat", minCat)); // query parameter
            if (maxCat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_cat", maxCat)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExploreSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExplorerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExplorerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExplorerResponse)));
        }

        /// <summary>
        /// Get Segment Leaderboard Returns the specified segment leaderboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>SegmentLeaderboard</returns>
        public SegmentLeaderboard GetLeaderboardBySegmentId (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null)
        {
             ApiResponse<SegmentLeaderboard> localVarResponse = GetLeaderboardBySegmentIdWithHttpInfo(id, gender, ageGroup, weightClass, following, clubId, dateRange, contextEntries, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Segment Leaderboard Returns the specified segment leaderboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of SegmentLeaderboard</returns>
        public ApiResponse< SegmentLeaderboard > GetLeaderboardBySegmentIdWithHttpInfo (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegmentsApi->GetLeaderboardBySegmentId");

            var localVarPath = "/segments/{id}/leaderboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter
            if (ageGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "age_group", ageGroup)); // query parameter
            if (weightClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weight_class", weightClass)); // query parameter
            if (following != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "following", following)); // query parameter
            if (clubId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "club_id", clubId)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_range", dateRange)); // query parameter
            if (contextEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context_entries", contextEntries)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardBySegmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SegmentLeaderboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SegmentLeaderboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SegmentLeaderboard)));
        }

        /// <summary>
        /// Get Segment Leaderboard Returns the specified segment leaderboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of SegmentLeaderboard</returns>
        public async System.Threading.Tasks.Task<SegmentLeaderboard> GetLeaderboardBySegmentIdAsync (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null)
        {
             ApiResponse<SegmentLeaderboard> localVarResponse = await GetLeaderboardBySegmentIdAsyncWithHttpInfo(id, gender, ageGroup, weightClass, following, clubId, dateRange, contextEntries, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Segment Leaderboard Returns the specified segment leaderboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment leaderboard.</param>
        /// <param name="gender">Filter by gender. (optional)</param>
        /// <param name="ageGroup">Summit Feature. Filter by age group. (optional)</param>
        /// <param name="weightClass">Summit Feature. Filter by weight class. (optional)</param>
        /// <param name="following">Filter by friends of the authenticated athlete. (optional)</param>
        /// <param name="clubId">Filter by club. (optional)</param>
        /// <param name="dateRange">Filter by date range. (optional)</param>
        /// <param name="contextEntries"> (optional)</param>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (SegmentLeaderboard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SegmentLeaderboard>> GetLeaderboardBySegmentIdAsyncWithHttpInfo (long? id, string gender = null, string ageGroup = null, string weightClass = null, bool? following = null, long? clubId = null, string dateRange = null, int? contextEntries = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegmentsApi->GetLeaderboardBySegmentId");

            var localVarPath = "/segments/{id}/leaderboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter
            if (ageGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "age_group", ageGroup)); // query parameter
            if (weightClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weight_class", weightClass)); // query parameter
            if (following != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "following", following)); // query parameter
            if (clubId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "club_id", clubId)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_range", dateRange)); // query parameter
            if (contextEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context_entries", contextEntries)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardBySegmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SegmentLeaderboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SegmentLeaderboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SegmentLeaderboard)));
        }

        /// <summary>
        /// List Starred Segments List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>List&lt;SummarySegment&gt;</returns>
        public List<SummarySegment> GetLoggedInAthleteStarredSegments (int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummarySegment>> localVarResponse = GetLoggedInAthleteStarredSegmentsWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Starred Segments List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SummarySegment&gt;</returns>
        public ApiResponse< List<SummarySegment> > GetLoggedInAthleteStarredSegmentsWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/segments/starred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteStarredSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummarySegment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummarySegment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummarySegment>)));
        }

        /// <summary>
        /// List Starred Segments List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of List&lt;SummarySegment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummarySegment>> GetLoggedInAthleteStarredSegmentsAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<List<SummarySegment>> localVarResponse = await GetLoggedInAthleteStarredSegmentsAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Starred Segments List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. (optional)</param>
        /// <param name="perPage">Number of items per page. Defaults to 30. (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SummarySegment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummarySegment>>> GetLoggedInAthleteStarredSegmentsAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/segments/starred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteStarredSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummarySegment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SummarySegment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummarySegment>)));
        }

        /// <summary>
        /// Get Segment Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>DetailedSegment</returns>
        public DetailedSegment GetSegmentById (long? id)
        {
             ApiResponse<DetailedSegment> localVarResponse = GetSegmentByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Segment Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>ApiResponse of DetailedSegment</returns>
        public ApiResponse< DetailedSegment > GetSegmentByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegmentsApi->GetSegmentById");

            var localVarPath = "/segments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedSegment)));
        }

        /// <summary>
        /// Get Segment Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>Task of DetailedSegment</returns>
        public async System.Threading.Tasks.Task<DetailedSegment> GetSegmentByIdAsync (long? id)
        {
             ApiResponse<DetailedSegment> localVarResponse = await GetSegmentByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Segment Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment.</param>
        /// <returns>Task of ApiResponse (DetailedSegment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedSegment>> GetSegmentByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegmentsApi->GetSegmentById");

            var localVarPath = "/segments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedSegment)));
        }

        /// <summary>
        /// Star Segment Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>DetailedSegment</returns>
        public DetailedSegment StarSegment (long? id, bool? starred)
        {
             ApiResponse<DetailedSegment> localVarResponse = StarSegmentWithHttpInfo(id, starred);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Star Segment Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>ApiResponse of DetailedSegment</returns>
        public ApiResponse< DetailedSegment > StarSegmentWithHttpInfo (long? id, bool? starred)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegmentsApi->StarSegment");
            // verify the required parameter 'starred' is set
            if (starred == null)
                throw new ApiException(400, "Missing required parameter 'starred' when calling SegmentsApi->StarSegment");

            var localVarPath = "/segments/{id}/starred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (starred != null) localVarFormParams.Add("starred", this.Configuration.ApiClient.ParameterToString(starred)); // form parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StarSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedSegment)));
        }

        /// <summary>
        /// Star Segment Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>Task of DetailedSegment</returns>
        public async System.Threading.Tasks.Task<DetailedSegment> StarSegmentAsync (long? id, bool? starred)
        {
             ApiResponse<DetailedSegment> localVarResponse = await StarSegmentAsyncWithHttpInfo(id, starred);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Star Segment Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the segment to star.</param>
        /// <param name="starred">If true, star the segment; if false, unstar the segment.</param>
        /// <returns>Task of ApiResponse (DetailedSegment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedSegment>> StarSegmentAsyncWithHttpInfo (long? id, bool? starred)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegmentsApi->StarSegment");
            // verify the required parameter 'starred' is set
            if (starred == null)
                throw new ApiException(400, "Missing required parameter 'starred' when calling SegmentsApi->StarSegment");

            var localVarPath = "/segments/{id}/starred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (starred != null) localVarFormParams.Add("starred", this.Configuration.ApiClient.ParameterToString(starred)); // form parameter

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StarSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedSegment)));
        }

    }
}
