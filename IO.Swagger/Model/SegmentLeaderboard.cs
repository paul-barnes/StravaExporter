/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A
    /// </summary>
    [DataContract]
    public partial class SegmentLeaderboard :  IEquatable<SegmentLeaderboard>, IValidatableObject
    {
        /// <summary>
        /// Defines KomType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KomTypeEnum
        {
            
            /// <summary>
            /// Enum Kom for value: kom
            /// </summary>
            [EnumMember(Value = "kom")]
            Kom = 1,
            
            /// <summary>
            /// Enum Cr for value: cr
            /// </summary>
            [EnumMember(Value = "cr")]
            Cr = 2
        }

        /// <summary>
        /// Gets or Sets KomType
        /// </summary>
        [DataMember(Name="kom_type", EmitDefaultValue=false)]
        public KomTypeEnum? KomType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentLeaderboard" /> class.
        /// </summary>
        /// <param name="entryCount">The total number of entries for this leaderboard.</param>
        /// <param name="effortCount">Deprecated, use entry_count.</param>
        /// <param name="komType">komType.</param>
        /// <param name="entries">entries.</param>
        public SegmentLeaderboard(int? entryCount = default(int?), int? effortCount = default(int?), KomTypeEnum? komType = default(KomTypeEnum?), List<SegmentLeaderboardEntry> entries = default(List<SegmentLeaderboardEntry>))
        {
            this.EntryCount = entryCount;
            this.EffortCount = effortCount;
            this.KomType = komType;
            this.Entries = entries;
        }
        
        /// <summary>
        /// The total number of entries for this leaderboard
        /// </summary>
        /// <value>The total number of entries for this leaderboard</value>
        [DataMember(Name="entry_count", EmitDefaultValue=false)]
        public int? EntryCount { get; set; }

        /// <summary>
        /// Deprecated, use entry_count
        /// </summary>
        /// <value>Deprecated, use entry_count</value>
        [DataMember(Name="effort_count", EmitDefaultValue=false)]
        public int? EffortCount { get; set; }


        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public List<SegmentLeaderboardEntry> Entries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegmentLeaderboard {\n");
            sb.Append("  EntryCount: ").Append(EntryCount).Append("\n");
            sb.Append("  EffortCount: ").Append(EffortCount).Append("\n");
            sb.Append("  KomType: ").Append(KomType).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegmentLeaderboard);
        }

        /// <summary>
        /// Returns true if SegmentLeaderboard instances are equal
        /// </summary>
        /// <param name="input">Instance of SegmentLeaderboard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegmentLeaderboard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryCount == input.EntryCount ||
                    (this.EntryCount != null &&
                    this.EntryCount.Equals(input.EntryCount))
                ) && 
                (
                    this.EffortCount == input.EffortCount ||
                    (this.EffortCount != null &&
                    this.EffortCount.Equals(input.EffortCount))
                ) && 
                (
                    this.KomType == input.KomType ||
                    (this.KomType != null &&
                    this.KomType.Equals(input.KomType))
                ) && 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryCount != null)
                    hashCode = hashCode * 59 + this.EntryCount.GetHashCode();
                if (this.EffortCount != null)
                    hashCode = hashCode * 59 + this.EffortCount.GetHashCode();
                if (this.KomType != null)
                    hashCode = hashCode * 59 + this.KomType.GetHashCode();
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
