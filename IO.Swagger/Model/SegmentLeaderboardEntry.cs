/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A row in a segment leaderboard
    /// </summary>
    [DataContract]
    public partial class SegmentLeaderboardEntry :  IEquatable<SegmentLeaderboardEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentLeaderboardEntry" /> class.
        /// </summary>
        /// <param name="athleteName">The public name of the athlete.</param>
        /// <param name="elapsedTime">The elapsed of the segment effort associated with this entry.</param>
        /// <param name="movingTime">The moving of the segment effort associated with this entry.</param>
        /// <param name="startDate">The time at which the effort was started..</param>
        /// <param name="startDateLocal">The time at which the effort was started in the local timezone..</param>
        /// <param name="rank">The rank of this entry in the leaderboard.</param>
        public SegmentLeaderboardEntry(string athleteName = default(string), int? elapsedTime = default(int?), int? movingTime = default(int?), DateTime? startDate = default(DateTime?), DateTime? startDateLocal = default(DateTime?), int? rank = default(int?))
        {
            this.AthleteName = athleteName;
            this.ElapsedTime = elapsedTime;
            this.MovingTime = movingTime;
            this.StartDate = startDate;
            this.StartDateLocal = startDateLocal;
            this.Rank = rank;
        }
        
        /// <summary>
        /// The public name of the athlete
        /// </summary>
        /// <value>The public name of the athlete</value>
        [DataMember(Name="athlete_name", EmitDefaultValue=false)]
        public string AthleteName { get; set; }

        /// <summary>
        /// The elapsed of the segment effort associated with this entry
        /// </summary>
        /// <value>The elapsed of the segment effort associated with this entry</value>
        [DataMember(Name="elapsed_time", EmitDefaultValue=false)]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The moving of the segment effort associated with this entry
        /// </summary>
        /// <value>The moving of the segment effort associated with this entry</value>
        [DataMember(Name="moving_time", EmitDefaultValue=false)]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The time at which the effort was started.
        /// </summary>
        /// <value>The time at which the effort was started.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The time at which the effort was started in the local timezone.
        /// </summary>
        /// <value>The time at which the effort was started in the local timezone.</value>
        [DataMember(Name="start_date_local", EmitDefaultValue=false)]
        public DateTime? StartDateLocal { get; set; }

        /// <summary>
        /// The rank of this entry in the leaderboard
        /// </summary>
        /// <value>The rank of this entry in the leaderboard</value>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public int? Rank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegmentLeaderboardEntry {\n");
            sb.Append("  AthleteName: ").Append(AthleteName).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDateLocal: ").Append(StartDateLocal).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegmentLeaderboardEntry);
        }

        /// <summary>
        /// Returns true if SegmentLeaderboardEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of SegmentLeaderboardEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegmentLeaderboardEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AthleteName == input.AthleteName ||
                    (this.AthleteName != null &&
                    this.AthleteName.Equals(input.AthleteName))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.MovingTime == input.MovingTime ||
                    (this.MovingTime != null &&
                    this.MovingTime.Equals(input.MovingTime))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartDateLocal == input.StartDateLocal ||
                    (this.StartDateLocal != null &&
                    this.StartDateLocal.Equals(input.StartDateLocal))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AthleteName != null)
                    hashCode = hashCode * 59 + this.AthleteName.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.MovingTime != null)
                    hashCode = hashCode * 59 + this.MovingTime.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartDateLocal != null)
                    hashCode = hashCode * 59 + this.StartDateLocal.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
