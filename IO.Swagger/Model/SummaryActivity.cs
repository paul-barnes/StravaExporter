/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SummaryActivity
    /// </summary>
    [DataContract]
    public partial class SummaryActivity :  IEquatable<SummaryActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryActivity" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the activity.</param>
        /// <param name="externalId">The identifier provided at upload time.</param>
        /// <param name="uploadId">The identifier of the upload that resulted in this activity.</param>
        /// <param name="athlete">athlete.</param>
        /// <param name="name">The name of the activity.</param>
        /// <param name="distance">The activity&#39;s distance, in meters.</param>
        /// <param name="movingTime">The activity&#39;s moving time, in seconds.</param>
        /// <param name="elapsedTime">The activity&#39;s elapsed time, in seconds.</param>
        /// <param name="totalElevationGain">The activity&#39;s total elevation gain..</param>
        /// <param name="elevHigh">The activity&#39;s highest elevation, in meters.</param>
        /// <param name="elevLow">The activity&#39;s lowest elevation, in meters.</param>
        /// <param name="type">type.</param>
        /// <param name="startDate">The time at which the activity was started..</param>
        /// <param name="startDateLocal">The time at which the activity was started in the local timezone..</param>
        /// <param name="timezone">The timezone of the activity.</param>
        /// <param name="startLatlng">startLatlng.</param>
        /// <param name="endLatlng">endLatlng.</param>
        /// <param name="achievementCount">The number of achievements gained during this activity.</param>
        /// <param name="kudosCount">The number of kudos given for this activity.</param>
        /// <param name="commentCount">The number of comments for this activity.</param>
        /// <param name="athleteCount">The number of athletes for taking part in a group activity.</param>
        /// <param name="photoCount">The number of Instagram photos for this activity.</param>
        /// <param name="totalPhotoCount">The number of Instagram and Strava photos for this activity.</param>
        /// <param name="map">map.</param>
        /// <param name="trainer">Whether this activity was recorded on a training machine.</param>
        /// <param name="commute">Whether this activity is a commute.</param>
        /// <param name="manual">Whether this activity was created manually.</param>
        /// <param name="_private">Whether this activity is private.</param>
        /// <param name="flagged">Whether this activity is flagged.</param>
        /// <param name="workoutType">The activity&#39;s workout type.</param>
        /// <param name="averageSpeed">The activity&#39;s average speed, in meters per second.</param>
        /// <param name="maxSpeed">The activity&#39;s max speed, in meters per second.</param>
        /// <param name="hasKudoed">Whether the logged-in athlete has kudoed this activity.</param>
        /// <param name="gearId">The id of the gear for the activity.</param>
        /// <param name="kilojoules">The total work done in kilojoules during this activity. Rides only.</param>
        /// <param name="averageWatts">Average power output in watts during this activity. Rides only.</param>
        /// <param name="deviceWatts">Whether the watts are from a power meter, false if estimated.</param>
        /// <param name="maxWatts">Rides with power meter data only.</param>
        /// <param name="weightedAverageWatts">Similar to Normalized Power. Rides with power meter data only.</param>
        public SummaryActivity(long? id = default(long?), string externalId = default(string), long? uploadId = default(long?), MetaAthlete athlete = default(MetaAthlete), string name = default(string), float? distance = default(float?), int? movingTime = default(int?), int? elapsedTime = default(int?), float? totalElevationGain = default(float?), float? elevHigh = default(float?), float? elevLow = default(float?), ActivityType type = default(ActivityType), DateTime? startDate = default(DateTime?), DateTime? startDateLocal = default(DateTime?), string timezone = default(string), LatLng startLatlng = default(LatLng), LatLng endLatlng = default(LatLng), int? achievementCount = default(int?), int? kudosCount = default(int?), int? commentCount = default(int?), int? athleteCount = default(int?), int? photoCount = default(int?), int? totalPhotoCount = default(int?), PolylineMap map = default(PolylineMap), bool? trainer = default(bool?), bool? commute = default(bool?), bool? manual = default(bool?), bool? _private = default(bool?), bool? flagged = default(bool?), int? workoutType = default(int?), float? averageSpeed = default(float?), float? maxSpeed = default(float?), bool? hasKudoed = default(bool?), string gearId = default(string), float? kilojoules = default(float?), float? averageWatts = default(float?), bool? deviceWatts = default(bool?), int? maxWatts = default(int?), int? weightedAverageWatts = default(int?))
        {
            this.Id = id;
            this.ExternalId = externalId;
            this.UploadId = uploadId;
            this.Athlete = athlete;
            this.Name = name;
            this.Distance = distance;
            this.MovingTime = movingTime;
            this.ElapsedTime = elapsedTime;
            this.TotalElevationGain = totalElevationGain;
            this.ElevHigh = elevHigh;
            this.ElevLow = elevLow;
            this.Type = type;
            this.StartDate = startDate;
            this.StartDateLocal = startDateLocal;
            this.Timezone = timezone;
            this.StartLatlng = startLatlng;
            this.EndLatlng = endLatlng;
            this.AchievementCount = achievementCount;
            this.KudosCount = kudosCount;
            this.CommentCount = commentCount;
            this.AthleteCount = athleteCount;
            this.PhotoCount = photoCount;
            this.TotalPhotoCount = totalPhotoCount;
            this.Map = map;
            this.Trainer = trainer;
            this.Commute = commute;
            this.Manual = manual;
            this.Private = _private;
            this.Flagged = flagged;
            this.WorkoutType = workoutType;
            this.AverageSpeed = averageSpeed;
            this.MaxSpeed = maxSpeed;
            this.HasKudoed = hasKudoed;
            this.GearId = gearId;
            this.Kilojoules = kilojoules;
            this.AverageWatts = averageWatts;
            this.DeviceWatts = deviceWatts;
            this.MaxWatts = maxWatts;
            this.WeightedAverageWatts = weightedAverageWatts;
        }
        
        /// <summary>
        /// The unique identifier of the activity
        /// </summary>
        /// <value>The unique identifier of the activity</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The identifier provided at upload time
        /// </summary>
        /// <value>The identifier provided at upload time</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The identifier of the upload that resulted in this activity
        /// </summary>
        /// <value>The identifier of the upload that resulted in this activity</value>
        [DataMember(Name="upload_id", EmitDefaultValue=false)]
        public long? UploadId { get; set; }

        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>
        [DataMember(Name="athlete", EmitDefaultValue=false)]
        public MetaAthlete Athlete { get; set; }

        /// <summary>
        /// The name of the activity
        /// </summary>
        /// <value>The name of the activity</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The activity&#39;s distance, in meters
        /// </summary>
        /// <value>The activity&#39;s distance, in meters</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public float? Distance { get; set; }

        /// <summary>
        /// The activity&#39;s moving time, in seconds
        /// </summary>
        /// <value>The activity&#39;s moving time, in seconds</value>
        [DataMember(Name="moving_time", EmitDefaultValue=false)]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The activity&#39;s elapsed time, in seconds
        /// </summary>
        /// <value>The activity&#39;s elapsed time, in seconds</value>
        [DataMember(Name="elapsed_time", EmitDefaultValue=false)]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The activity&#39;s total elevation gain.
        /// </summary>
        /// <value>The activity&#39;s total elevation gain.</value>
        [DataMember(Name="total_elevation_gain", EmitDefaultValue=false)]
        public float? TotalElevationGain { get; set; }

        /// <summary>
        /// The activity&#39;s highest elevation, in meters
        /// </summary>
        /// <value>The activity&#39;s highest elevation, in meters</value>
        [DataMember(Name="elev_high", EmitDefaultValue=false)]
        public float? ElevHigh { get; set; }

        /// <summary>
        /// The activity&#39;s lowest elevation, in meters
        /// </summary>
        /// <value>The activity&#39;s lowest elevation, in meters</value>
        [DataMember(Name="elev_low", EmitDefaultValue=false)]
        public float? ElevLow { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ActivityType Type { get; set; }

        /// <summary>
        /// The time at which the activity was started.
        /// </summary>
        /// <value>The time at which the activity was started.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The time at which the activity was started in the local timezone.
        /// </summary>
        /// <value>The time at which the activity was started in the local timezone.</value>
        [DataMember(Name="start_date_local", EmitDefaultValue=false)]
        public DateTime? StartDateLocal { get; set; }

        /// <summary>
        /// The timezone of the activity
        /// </summary>
        /// <value>The timezone of the activity</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets StartLatlng
        /// </summary>
        [DataMember(Name="start_latlng", EmitDefaultValue=false)]
        public LatLng StartLatlng { get; set; }

        /// <summary>
        /// Gets or Sets EndLatlng
        /// </summary>
        [DataMember(Name="end_latlng", EmitDefaultValue=false)]
        public LatLng EndLatlng { get; set; }

        /// <summary>
        /// The number of achievements gained during this activity
        /// </summary>
        /// <value>The number of achievements gained during this activity</value>
        [DataMember(Name="achievement_count", EmitDefaultValue=false)]
        public int? AchievementCount { get; set; }

        /// <summary>
        /// The number of kudos given for this activity
        /// </summary>
        /// <value>The number of kudos given for this activity</value>
        [DataMember(Name="kudos_count", EmitDefaultValue=false)]
        public int? KudosCount { get; set; }

        /// <summary>
        /// The number of comments for this activity
        /// </summary>
        /// <value>The number of comments for this activity</value>
        [DataMember(Name="comment_count", EmitDefaultValue=false)]
        public int? CommentCount { get; set; }

        /// <summary>
        /// The number of athletes for taking part in a group activity
        /// </summary>
        /// <value>The number of athletes for taking part in a group activity</value>
        [DataMember(Name="athlete_count", EmitDefaultValue=false)]
        public int? AthleteCount { get; set; }

        /// <summary>
        /// The number of Instagram photos for this activity
        /// </summary>
        /// <value>The number of Instagram photos for this activity</value>
        [DataMember(Name="photo_count", EmitDefaultValue=false)]
        public int? PhotoCount { get; set; }

        /// <summary>
        /// The number of Instagram and Strava photos for this activity
        /// </summary>
        /// <value>The number of Instagram and Strava photos for this activity</value>
        [DataMember(Name="total_photo_count", EmitDefaultValue=false)]
        public int? TotalPhotoCount { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name="map", EmitDefaultValue=false)]
        public PolylineMap Map { get; set; }

        /// <summary>
        /// Whether this activity was recorded on a training machine
        /// </summary>
        /// <value>Whether this activity was recorded on a training machine</value>
        [DataMember(Name="trainer", EmitDefaultValue=false)]
        public bool? Trainer { get; set; }

        /// <summary>
        /// Whether this activity is a commute
        /// </summary>
        /// <value>Whether this activity is a commute</value>
        [DataMember(Name="commute", EmitDefaultValue=false)]
        public bool? Commute { get; set; }

        /// <summary>
        /// Whether this activity was created manually
        /// </summary>
        /// <value>Whether this activity was created manually</value>
        [DataMember(Name="manual", EmitDefaultValue=false)]
        public bool? Manual { get; set; }

        /// <summary>
        /// Whether this activity is private
        /// </summary>
        /// <value>Whether this activity is private</value>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool? Private { get; set; }

        /// <summary>
        /// Whether this activity is flagged
        /// </summary>
        /// <value>Whether this activity is flagged</value>
        [DataMember(Name="flagged", EmitDefaultValue=false)]
        public bool? Flagged { get; set; }

        /// <summary>
        /// The activity&#39;s workout type
        /// </summary>
        /// <value>The activity&#39;s workout type</value>
        [DataMember(Name="workout_type", EmitDefaultValue=false)]
        public int? WorkoutType { get; set; }

        /// <summary>
        /// The activity&#39;s average speed, in meters per second
        /// </summary>
        /// <value>The activity&#39;s average speed, in meters per second</value>
        [DataMember(Name="average_speed", EmitDefaultValue=false)]
        public float? AverageSpeed { get; set; }

        /// <summary>
        /// The activity&#39;s max speed, in meters per second
        /// </summary>
        /// <value>The activity&#39;s max speed, in meters per second</value>
        [DataMember(Name="max_speed", EmitDefaultValue=false)]
        public float? MaxSpeed { get; set; }

        /// <summary>
        /// Whether the logged-in athlete has kudoed this activity
        /// </summary>
        /// <value>Whether the logged-in athlete has kudoed this activity</value>
        [DataMember(Name="has_kudoed", EmitDefaultValue=false)]
        public bool? HasKudoed { get; set; }

        /// <summary>
        /// The id of the gear for the activity
        /// </summary>
        /// <value>The id of the gear for the activity</value>
        [DataMember(Name="gear_id", EmitDefaultValue=false)]
        public string GearId { get; set; }

        /// <summary>
        /// The total work done in kilojoules during this activity. Rides only
        /// </summary>
        /// <value>The total work done in kilojoules during this activity. Rides only</value>
        [DataMember(Name="kilojoules", EmitDefaultValue=false)]
        public float? Kilojoules { get; set; }

        /// <summary>
        /// Average power output in watts during this activity. Rides only
        /// </summary>
        /// <value>Average power output in watts during this activity. Rides only</value>
        [DataMember(Name="average_watts", EmitDefaultValue=false)]
        public float? AverageWatts { get; set; }

        /// <summary>
        /// Whether the watts are from a power meter, false if estimated
        /// </summary>
        /// <value>Whether the watts are from a power meter, false if estimated</value>
        [DataMember(Name="device_watts", EmitDefaultValue=false)]
        public bool? DeviceWatts { get; set; }

        /// <summary>
        /// Rides with power meter data only
        /// </summary>
        /// <value>Rides with power meter data only</value>
        [DataMember(Name="max_watts", EmitDefaultValue=false)]
        public int? MaxWatts { get; set; }

        /// <summary>
        /// Similar to Normalized Power. Rides with power meter data only
        /// </summary>
        /// <value>Similar to Normalized Power. Rides with power meter data only</value>
        [DataMember(Name="weighted_average_watts", EmitDefaultValue=false)]
        public int? WeightedAverageWatts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryActivity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  TotalElevationGain: ").Append(TotalElevationGain).Append("\n");
            sb.Append("  ElevHigh: ").Append(ElevHigh).Append("\n");
            sb.Append("  ElevLow: ").Append(ElevLow).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDateLocal: ").Append(StartDateLocal).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  StartLatlng: ").Append(StartLatlng).Append("\n");
            sb.Append("  EndLatlng: ").Append(EndLatlng).Append("\n");
            sb.Append("  AchievementCount: ").Append(AchievementCount).Append("\n");
            sb.Append("  KudosCount: ").Append(KudosCount).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  AthleteCount: ").Append(AthleteCount).Append("\n");
            sb.Append("  PhotoCount: ").Append(PhotoCount).Append("\n");
            sb.Append("  TotalPhotoCount: ").Append(TotalPhotoCount).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Trainer: ").Append(Trainer).Append("\n");
            sb.Append("  Commute: ").Append(Commute).Append("\n");
            sb.Append("  Manual: ").Append(Manual).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Flagged: ").Append(Flagged).Append("\n");
            sb.Append("  WorkoutType: ").Append(WorkoutType).Append("\n");
            sb.Append("  AverageSpeed: ").Append(AverageSpeed).Append("\n");
            sb.Append("  MaxSpeed: ").Append(MaxSpeed).Append("\n");
            sb.Append("  HasKudoed: ").Append(HasKudoed).Append("\n");
            sb.Append("  GearId: ").Append(GearId).Append("\n");
            sb.Append("  Kilojoules: ").Append(Kilojoules).Append("\n");
            sb.Append("  AverageWatts: ").Append(AverageWatts).Append("\n");
            sb.Append("  DeviceWatts: ").Append(DeviceWatts).Append("\n");
            sb.Append("  MaxWatts: ").Append(MaxWatts).Append("\n");
            sb.Append("  WeightedAverageWatts: ").Append(WeightedAverageWatts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryActivity);
        }

        /// <summary>
        /// Returns true if SummaryActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                ) && 
                (
                    this.Athlete == input.Athlete ||
                    (this.Athlete != null &&
                    this.Athlete.Equals(input.Athlete))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.MovingTime == input.MovingTime ||
                    (this.MovingTime != null &&
                    this.MovingTime.Equals(input.MovingTime))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.TotalElevationGain == input.TotalElevationGain ||
                    (this.TotalElevationGain != null &&
                    this.TotalElevationGain.Equals(input.TotalElevationGain))
                ) && 
                (
                    this.ElevHigh == input.ElevHigh ||
                    (this.ElevHigh != null &&
                    this.ElevHigh.Equals(input.ElevHigh))
                ) && 
                (
                    this.ElevLow == input.ElevLow ||
                    (this.ElevLow != null &&
                    this.ElevLow.Equals(input.ElevLow))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartDateLocal == input.StartDateLocal ||
                    (this.StartDateLocal != null &&
                    this.StartDateLocal.Equals(input.StartDateLocal))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.StartLatlng == input.StartLatlng ||
                    (this.StartLatlng != null &&
                    this.StartLatlng.Equals(input.StartLatlng))
                ) && 
                (
                    this.EndLatlng == input.EndLatlng ||
                    (this.EndLatlng != null &&
                    this.EndLatlng.Equals(input.EndLatlng))
                ) && 
                (
                    this.AchievementCount == input.AchievementCount ||
                    (this.AchievementCount != null &&
                    this.AchievementCount.Equals(input.AchievementCount))
                ) && 
                (
                    this.KudosCount == input.KudosCount ||
                    (this.KudosCount != null &&
                    this.KudosCount.Equals(input.KudosCount))
                ) && 
                (
                    this.CommentCount == input.CommentCount ||
                    (this.CommentCount != null &&
                    this.CommentCount.Equals(input.CommentCount))
                ) && 
                (
                    this.AthleteCount == input.AthleteCount ||
                    (this.AthleteCount != null &&
                    this.AthleteCount.Equals(input.AthleteCount))
                ) && 
                (
                    this.PhotoCount == input.PhotoCount ||
                    (this.PhotoCount != null &&
                    this.PhotoCount.Equals(input.PhotoCount))
                ) && 
                (
                    this.TotalPhotoCount == input.TotalPhotoCount ||
                    (this.TotalPhotoCount != null &&
                    this.TotalPhotoCount.Equals(input.TotalPhotoCount))
                ) && 
                (
                    this.Map == input.Map ||
                    (this.Map != null &&
                    this.Map.Equals(input.Map))
                ) && 
                (
                    this.Trainer == input.Trainer ||
                    (this.Trainer != null &&
                    this.Trainer.Equals(input.Trainer))
                ) && 
                (
                    this.Commute == input.Commute ||
                    (this.Commute != null &&
                    this.Commute.Equals(input.Commute))
                ) && 
                (
                    this.Manual == input.Manual ||
                    (this.Manual != null &&
                    this.Manual.Equals(input.Manual))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.Flagged == input.Flagged ||
                    (this.Flagged != null &&
                    this.Flagged.Equals(input.Flagged))
                ) && 
                (
                    this.WorkoutType == input.WorkoutType ||
                    (this.WorkoutType != null &&
                    this.WorkoutType.Equals(input.WorkoutType))
                ) && 
                (
                    this.AverageSpeed == input.AverageSpeed ||
                    (this.AverageSpeed != null &&
                    this.AverageSpeed.Equals(input.AverageSpeed))
                ) && 
                (
                    this.MaxSpeed == input.MaxSpeed ||
                    (this.MaxSpeed != null &&
                    this.MaxSpeed.Equals(input.MaxSpeed))
                ) && 
                (
                    this.HasKudoed == input.HasKudoed ||
                    (this.HasKudoed != null &&
                    this.HasKudoed.Equals(input.HasKudoed))
                ) && 
                (
                    this.GearId == input.GearId ||
                    (this.GearId != null &&
                    this.GearId.Equals(input.GearId))
                ) && 
                (
                    this.Kilojoules == input.Kilojoules ||
                    (this.Kilojoules != null &&
                    this.Kilojoules.Equals(input.Kilojoules))
                ) && 
                (
                    this.AverageWatts == input.AverageWatts ||
                    (this.AverageWatts != null &&
                    this.AverageWatts.Equals(input.AverageWatts))
                ) && 
                (
                    this.DeviceWatts == input.DeviceWatts ||
                    (this.DeviceWatts != null &&
                    this.DeviceWatts.Equals(input.DeviceWatts))
                ) && 
                (
                    this.MaxWatts == input.MaxWatts ||
                    (this.MaxWatts != null &&
                    this.MaxWatts.Equals(input.MaxWatts))
                ) && 
                (
                    this.WeightedAverageWatts == input.WeightedAverageWatts ||
                    (this.WeightedAverageWatts != null &&
                    this.WeightedAverageWatts.Equals(input.WeightedAverageWatts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.UploadId != null)
                    hashCode = hashCode * 59 + this.UploadId.GetHashCode();
                if (this.Athlete != null)
                    hashCode = hashCode * 59 + this.Athlete.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.MovingTime != null)
                    hashCode = hashCode * 59 + this.MovingTime.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.TotalElevationGain != null)
                    hashCode = hashCode * 59 + this.TotalElevationGain.GetHashCode();
                if (this.ElevHigh != null)
                    hashCode = hashCode * 59 + this.ElevHigh.GetHashCode();
                if (this.ElevLow != null)
                    hashCode = hashCode * 59 + this.ElevLow.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartDateLocal != null)
                    hashCode = hashCode * 59 + this.StartDateLocal.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.StartLatlng != null)
                    hashCode = hashCode * 59 + this.StartLatlng.GetHashCode();
                if (this.EndLatlng != null)
                    hashCode = hashCode * 59 + this.EndLatlng.GetHashCode();
                if (this.AchievementCount != null)
                    hashCode = hashCode * 59 + this.AchievementCount.GetHashCode();
                if (this.KudosCount != null)
                    hashCode = hashCode * 59 + this.KudosCount.GetHashCode();
                if (this.CommentCount != null)
                    hashCode = hashCode * 59 + this.CommentCount.GetHashCode();
                if (this.AthleteCount != null)
                    hashCode = hashCode * 59 + this.AthleteCount.GetHashCode();
                if (this.PhotoCount != null)
                    hashCode = hashCode * 59 + this.PhotoCount.GetHashCode();
                if (this.TotalPhotoCount != null)
                    hashCode = hashCode * 59 + this.TotalPhotoCount.GetHashCode();
                if (this.Map != null)
                    hashCode = hashCode * 59 + this.Map.GetHashCode();
                if (this.Trainer != null)
                    hashCode = hashCode * 59 + this.Trainer.GetHashCode();
                if (this.Commute != null)
                    hashCode = hashCode * 59 + this.Commute.GetHashCode();
                if (this.Manual != null)
                    hashCode = hashCode * 59 + this.Manual.GetHashCode();
                if (this.Private != null)
                    hashCode = hashCode * 59 + this.Private.GetHashCode();
                if (this.Flagged != null)
                    hashCode = hashCode * 59 + this.Flagged.GetHashCode();
                if (this.WorkoutType != null)
                    hashCode = hashCode * 59 + this.WorkoutType.GetHashCode();
                if (this.AverageSpeed != null)
                    hashCode = hashCode * 59 + this.AverageSpeed.GetHashCode();
                if (this.MaxSpeed != null)
                    hashCode = hashCode * 59 + this.MaxSpeed.GetHashCode();
                if (this.HasKudoed != null)
                    hashCode = hashCode * 59 + this.HasKudoed.GetHashCode();
                if (this.GearId != null)
                    hashCode = hashCode * 59 + this.GearId.GetHashCode();
                if (this.Kilojoules != null)
                    hashCode = hashCode * 59 + this.Kilojoules.GetHashCode();
                if (this.AverageWatts != null)
                    hashCode = hashCode * 59 + this.AverageWatts.GetHashCode();
                if (this.DeviceWatts != null)
                    hashCode = hashCode * 59 + this.DeviceWatts.GetHashCode();
                if (this.MaxWatts != null)
                    hashCode = hashCode * 59 + this.MaxWatts.GetHashCode();
                if (this.WeightedAverageWatts != null)
                    hashCode = hashCode * 59 + this.WeightedAverageWatts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AthleteCount (int?) minimum
            if(this.AthleteCount < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AthleteCount, must be a value greater than or equal to 1.", new [] { "AthleteCount" });
            }

            yield break;
        }
    }

}
