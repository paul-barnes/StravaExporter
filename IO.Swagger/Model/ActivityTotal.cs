/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
    /// </summary>
    [DataContract]
    public partial class ActivityTotal :  IEquatable<ActivityTotal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityTotal" /> class.
        /// </summary>
        /// <param name="count">The number of activities considered in this total..</param>
        /// <param name="distance">The total distance covered by the considered activities..</param>
        /// <param name="movingTime">The total moving time of the considered activities..</param>
        /// <param name="elapsedTime">The total elapsed time of the considered activities..</param>
        /// <param name="elevationGain">The total elevation gain of the considered activities..</param>
        /// <param name="achievementCount">The total number of achievements of the considered activities..</param>
        public ActivityTotal(int? count = default(int?), float? distance = default(float?), int? movingTime = default(int?), int? elapsedTime = default(int?), float? elevationGain = default(float?), int? achievementCount = default(int?))
        {
            this.Count = count;
            this.Distance = distance;
            this.MovingTime = movingTime;
            this.ElapsedTime = elapsedTime;
            this.ElevationGain = elevationGain;
            this.AchievementCount = achievementCount;
        }
        
        /// <summary>
        /// The number of activities considered in this total.
        /// </summary>
        /// <value>The number of activities considered in this total.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// The total distance covered by the considered activities.
        /// </summary>
        /// <value>The total distance covered by the considered activities.</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public float? Distance { get; set; }

        /// <summary>
        /// The total moving time of the considered activities.
        /// </summary>
        /// <value>The total moving time of the considered activities.</value>
        [DataMember(Name="moving_time", EmitDefaultValue=false)]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The total elapsed time of the considered activities.
        /// </summary>
        /// <value>The total elapsed time of the considered activities.</value>
        [DataMember(Name="elapsed_time", EmitDefaultValue=false)]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The total elevation gain of the considered activities.
        /// </summary>
        /// <value>The total elevation gain of the considered activities.</value>
        [DataMember(Name="elevation_gain", EmitDefaultValue=false)]
        public float? ElevationGain { get; set; }

        /// <summary>
        /// The total number of achievements of the considered activities.
        /// </summary>
        /// <value>The total number of achievements of the considered activities.</value>
        [DataMember(Name="achievement_count", EmitDefaultValue=false)]
        public int? AchievementCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityTotal {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  ElevationGain: ").Append(ElevationGain).Append("\n");
            sb.Append("  AchievementCount: ").Append(AchievementCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityTotal);
        }

        /// <summary>
        /// Returns true if ActivityTotal instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityTotal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityTotal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.MovingTime == input.MovingTime ||
                    (this.MovingTime != null &&
                    this.MovingTime.Equals(input.MovingTime))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.ElevationGain == input.ElevationGain ||
                    (this.ElevationGain != null &&
                    this.ElevationGain.Equals(input.ElevationGain))
                ) && 
                (
                    this.AchievementCount == input.AchievementCount ||
                    (this.AchievementCount != null &&
                    this.AchievementCount.Equals(input.AchievementCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.MovingTime != null)
                    hashCode = hashCode * 59 + this.MovingTime.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.ElevationGain != null)
                    hashCode = hashCode * 59 + this.ElevationGain.GetHashCode();
                if (this.AchievementCount != null)
                    hashCode = hashCode * 59 + this.AchievementCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
