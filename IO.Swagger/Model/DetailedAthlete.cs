/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetailedAthlete
    /// </summary>
    [DataContract]
    public partial class DetailedAthlete :  IEquatable<DetailedAthlete>, IValidatableObject
    {
        /// <summary>
        /// The athlete&#39;s sex.
        /// </summary>
        /// <value>The athlete&#39;s sex.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexEnum
        {
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,
            
            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2
        }

        /// <summary>
        /// The athlete&#39;s sex.
        /// </summary>
        /// <value>The athlete&#39;s sex.</value>
        [DataMember(Name="sex", EmitDefaultValue=false)]
        public SexEnum? Sex { get; set; }
        /// <summary>
        /// Whether the currently logged-in athlete follows this athlete.
        /// </summary>
        /// <value>Whether the currently logged-in athlete follows this athlete.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FriendEnum
        {
            
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            
            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 2,
            
            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            [EnumMember(Value = "blocked")]
            Blocked = 3
        }

        /// <summary>
        /// Whether the currently logged-in athlete follows this athlete.
        /// </summary>
        /// <value>Whether the currently logged-in athlete follows this athlete.</value>
        [DataMember(Name="friend", EmitDefaultValue=false)]
        public FriendEnum? Friend { get; set; }
        /// <summary>
        /// Whether this athlete follows the currently logged-in athlete.
        /// </summary>
        /// <value>Whether this athlete follows the currently logged-in athlete.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FollowerEnum
        {
            
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            
            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 2,
            
            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            [EnumMember(Value = "blocked")]
            Blocked = 3
        }

        /// <summary>
        /// Whether this athlete follows the currently logged-in athlete.
        /// </summary>
        /// <value>Whether this athlete follows the currently logged-in athlete.</value>
        [DataMember(Name="follower", EmitDefaultValue=false)]
        public FollowerEnum? Follower { get; set; }
        /// <summary>
        /// The athlete&#39;s preferred unit system.
        /// </summary>
        /// <value>The athlete&#39;s preferred unit system.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MeasurementPreferenceEnum
        {
            
            /// <summary>
            /// Enum Feet for value: feet
            /// </summary>
            [EnumMember(Value = "feet")]
            Feet = 1,
            
            /// <summary>
            /// Enum Meters for value: meters
            /// </summary>
            [EnumMember(Value = "meters")]
            Meters = 2
        }

        /// <summary>
        /// The athlete&#39;s preferred unit system.
        /// </summary>
        /// <value>The athlete&#39;s preferred unit system.</value>
        [DataMember(Name="measurement_preference", EmitDefaultValue=false)]
        public MeasurementPreferenceEnum? MeasurementPreference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedAthlete" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the athlete.</param>
        /// <param name="resourceState">Resource state, indicates level of detail. Possible values: 1 -&gt; \&quot;meta\&quot;, 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;.</param>
        /// <param name="firstname">The athlete&#39;s first name..</param>
        /// <param name="lastname">The athlete&#39;s last name..</param>
        /// <param name="profileMedium">URL to a 62x62 pixel profile picture..</param>
        /// <param name="profile">URL to a 124x124 pixel profile picture..</param>
        /// <param name="city">The athlete&#39;s city..</param>
        /// <param name="state">The athlete&#39;s state or geographical region..</param>
        /// <param name="country">The athlete&#39;s country..</param>
        /// <param name="sex">The athlete&#39;s sex..</param>
        /// <param name="friend">Whether the currently logged-in athlete follows this athlete..</param>
        /// <param name="follower">Whether this athlete follows the currently logged-in athlete..</param>
        /// <param name="premium">Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription..</param>
        /// <param name="summit">Whether the athlete has any Summit subscription..</param>
        /// <param name="createdAt">The time at which the athlete was created..</param>
        /// <param name="updatedAt">The time at which the athlete was last updated..</param>
        /// <param name="followerCount">The athlete&#39;s follower count..</param>
        /// <param name="friendCount">The athlete&#39;s friend count..</param>
        /// <param name="mutualFriendCount">The number or athletes mutually followed by this athlete and the currently logged-in athlete..</param>
        /// <param name="measurementPreference">The athlete&#39;s preferred unit system..</param>
        /// <param name="ftp">The athlete&#39;s FTP (Functional Threshold Power)..</param>
        /// <param name="weight">The athlete&#39;s weight..</param>
        /// <param name="clubs">The athlete&#39;s clubs..</param>
        /// <param name="bikes">The athlete&#39;s bikes..</param>
        /// <param name="shoes">The athlete&#39;s shoes..</param>
        public DetailedAthlete(int? id = default(int?), int? resourceState = default(int?), string firstname = default(string), string lastname = default(string), string profileMedium = default(string), string profile = default(string), string city = default(string), string state = default(string), string country = default(string), SexEnum? sex = default(SexEnum?), FriendEnum? friend = default(FriendEnum?), FollowerEnum? follower = default(FollowerEnum?), bool? premium = default(bool?), bool? summit = default(bool?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), int? followerCount = default(int?), int? friendCount = default(int?), int? mutualFriendCount = default(int?), MeasurementPreferenceEnum? measurementPreference = default(MeasurementPreferenceEnum?), int? ftp = default(int?), float? weight = default(float?), List<SummaryClub> clubs = default(List<SummaryClub>), List<SummaryGear> bikes = default(List<SummaryGear>), List<SummaryGear> shoes = default(List<SummaryGear>))
        {
            this.Id = id;
            this.ResourceState = resourceState;
            this.Firstname = firstname;
            this.Lastname = lastname;
            this.ProfileMedium = profileMedium;
            this.Profile = profile;
            this.City = city;
            this.State = state;
            this.Country = country;
            this.Sex = sex;
            this.Friend = friend;
            this.Follower = follower;
            this.Premium = premium;
            this.Summit = summit;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.FollowerCount = followerCount;
            this.FriendCount = friendCount;
            this.MutualFriendCount = mutualFriendCount;
            this.MeasurementPreference = measurementPreference;
            this.Ftp = ftp;
            this.Weight = weight;
            this.Clubs = clubs;
            this.Bikes = bikes;
            this.Shoes = shoes;
        }
        
        /// <summary>
        /// The unique identifier of the athlete
        /// </summary>
        /// <value>The unique identifier of the athlete</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Resource state, indicates level of detail. Possible values: 1 -&gt; \&quot;meta\&quot;, 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;
        /// </summary>
        /// <value>Resource state, indicates level of detail. Possible values: 1 -&gt; \&quot;meta\&quot;, 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;</value>
        [DataMember(Name="resource_state", EmitDefaultValue=false)]
        public int? ResourceState { get; set; }

        /// <summary>
        /// The athlete&#39;s first name.
        /// </summary>
        /// <value>The athlete&#39;s first name.</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// The athlete&#39;s last name.
        /// </summary>
        /// <value>The athlete&#39;s last name.</value>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// URL to a 62x62 pixel profile picture.
        /// </summary>
        /// <value>URL to a 62x62 pixel profile picture.</value>
        [DataMember(Name="profile_medium", EmitDefaultValue=false)]
        public string ProfileMedium { get; set; }

        /// <summary>
        /// URL to a 124x124 pixel profile picture.
        /// </summary>
        /// <value>URL to a 124x124 pixel profile picture.</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// The athlete&#39;s city.
        /// </summary>
        /// <value>The athlete&#39;s city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The athlete&#39;s state or geographical region.
        /// </summary>
        /// <value>The athlete&#39;s state or geographical region.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The athlete&#39;s country.
        /// </summary>
        /// <value>The athlete&#39;s country.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }




        /// <summary>
        /// Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
        /// </summary>
        /// <value>Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.</value>
        [DataMember(Name="premium", EmitDefaultValue=false)]
        public bool? Premium { get; set; }

        /// <summary>
        /// Whether the athlete has any Summit subscription.
        /// </summary>
        /// <value>Whether the athlete has any Summit subscription.</value>
        [DataMember(Name="summit", EmitDefaultValue=false)]
        public bool? Summit { get; set; }

        /// <summary>
        /// The time at which the athlete was created.
        /// </summary>
        /// <value>The time at which the athlete was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The time at which the athlete was last updated.
        /// </summary>
        /// <value>The time at which the athlete was last updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// The athlete&#39;s follower count.
        /// </summary>
        /// <value>The athlete&#39;s follower count.</value>
        [DataMember(Name="follower_count", EmitDefaultValue=false)]
        public int? FollowerCount { get; set; }

        /// <summary>
        /// The athlete&#39;s friend count.
        /// </summary>
        /// <value>The athlete&#39;s friend count.</value>
        [DataMember(Name="friend_count", EmitDefaultValue=false)]
        public int? FriendCount { get; set; }

        /// <summary>
        /// The number or athletes mutually followed by this athlete and the currently logged-in athlete.
        /// </summary>
        /// <value>The number or athletes mutually followed by this athlete and the currently logged-in athlete.</value>
        [DataMember(Name="mutual_friend_count", EmitDefaultValue=false)]
        public int? MutualFriendCount { get; set; }


        /// <summary>
        /// The athlete&#39;s FTP (Functional Threshold Power).
        /// </summary>
        /// <value>The athlete&#39;s FTP (Functional Threshold Power).</value>
        [DataMember(Name="ftp", EmitDefaultValue=false)]
        public int? Ftp { get; set; }

        /// <summary>
        /// The athlete&#39;s weight.
        /// </summary>
        /// <value>The athlete&#39;s weight.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public float? Weight { get; set; }

        /// <summary>
        /// The athlete&#39;s clubs.
        /// </summary>
        /// <value>The athlete&#39;s clubs.</value>
        [DataMember(Name="clubs", EmitDefaultValue=false)]
        public List<SummaryClub> Clubs { get; set; }

        /// <summary>
        /// The athlete&#39;s bikes.
        /// </summary>
        /// <value>The athlete&#39;s bikes.</value>
        [DataMember(Name="bikes", EmitDefaultValue=false)]
        public List<SummaryGear> Bikes { get; set; }

        /// <summary>
        /// The athlete&#39;s shoes.
        /// </summary>
        /// <value>The athlete&#39;s shoes.</value>
        [DataMember(Name="shoes", EmitDefaultValue=false)]
        public List<SummaryGear> Shoes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedAthlete {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ResourceState: ").Append(ResourceState).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  ProfileMedium: ").Append(ProfileMedium).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  Friend: ").Append(Friend).Append("\n");
            sb.Append("  Follower: ").Append(Follower).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  Summit: ").Append(Summit).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FollowerCount: ").Append(FollowerCount).Append("\n");
            sb.Append("  FriendCount: ").Append(FriendCount).Append("\n");
            sb.Append("  MutualFriendCount: ").Append(MutualFriendCount).Append("\n");
            sb.Append("  MeasurementPreference: ").Append(MeasurementPreference).Append("\n");
            sb.Append("  Ftp: ").Append(Ftp).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Clubs: ").Append(Clubs).Append("\n");
            sb.Append("  Bikes: ").Append(Bikes).Append("\n");
            sb.Append("  Shoes: ").Append(Shoes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedAthlete);
        }

        /// <summary>
        /// Returns true if DetailedAthlete instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedAthlete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedAthlete input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ResourceState == input.ResourceState ||
                    (this.ResourceState != null &&
                    this.ResourceState.Equals(input.ResourceState))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.ProfileMedium == input.ProfileMedium ||
                    (this.ProfileMedium != null &&
                    this.ProfileMedium.Equals(input.ProfileMedium))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Sex == input.Sex ||
                    (this.Sex != null &&
                    this.Sex.Equals(input.Sex))
                ) && 
                (
                    this.Friend == input.Friend ||
                    (this.Friend != null &&
                    this.Friend.Equals(input.Friend))
                ) && 
                (
                    this.Follower == input.Follower ||
                    (this.Follower != null &&
                    this.Follower.Equals(input.Follower))
                ) && 
                (
                    this.Premium == input.Premium ||
                    (this.Premium != null &&
                    this.Premium.Equals(input.Premium))
                ) && 
                (
                    this.Summit == input.Summit ||
                    (this.Summit != null &&
                    this.Summit.Equals(input.Summit))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.FollowerCount == input.FollowerCount ||
                    (this.FollowerCount != null &&
                    this.FollowerCount.Equals(input.FollowerCount))
                ) && 
                (
                    this.FriendCount == input.FriendCount ||
                    (this.FriendCount != null &&
                    this.FriendCount.Equals(input.FriendCount))
                ) && 
                (
                    this.MutualFriendCount == input.MutualFriendCount ||
                    (this.MutualFriendCount != null &&
                    this.MutualFriendCount.Equals(input.MutualFriendCount))
                ) && 
                (
                    this.MeasurementPreference == input.MeasurementPreference ||
                    (this.MeasurementPreference != null &&
                    this.MeasurementPreference.Equals(input.MeasurementPreference))
                ) && 
                (
                    this.Ftp == input.Ftp ||
                    (this.Ftp != null &&
                    this.Ftp.Equals(input.Ftp))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Clubs == input.Clubs ||
                    this.Clubs != null &&
                    this.Clubs.SequenceEqual(input.Clubs)
                ) && 
                (
                    this.Bikes == input.Bikes ||
                    this.Bikes != null &&
                    this.Bikes.SequenceEqual(input.Bikes)
                ) && 
                (
                    this.Shoes == input.Shoes ||
                    this.Shoes != null &&
                    this.Shoes.SequenceEqual(input.Shoes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ResourceState != null)
                    hashCode = hashCode * 59 + this.ResourceState.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.ProfileMedium != null)
                    hashCode = hashCode * 59 + this.ProfileMedium.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Sex != null)
                    hashCode = hashCode * 59 + this.Sex.GetHashCode();
                if (this.Friend != null)
                    hashCode = hashCode * 59 + this.Friend.GetHashCode();
                if (this.Follower != null)
                    hashCode = hashCode * 59 + this.Follower.GetHashCode();
                if (this.Premium != null)
                    hashCode = hashCode * 59 + this.Premium.GetHashCode();
                if (this.Summit != null)
                    hashCode = hashCode * 59 + this.Summit.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.FollowerCount != null)
                    hashCode = hashCode * 59 + this.FollowerCount.GetHashCode();
                if (this.FriendCount != null)
                    hashCode = hashCode * 59 + this.FriendCount.GetHashCode();
                if (this.MutualFriendCount != null)
                    hashCode = hashCode * 59 + this.MutualFriendCount.GetHashCode();
                if (this.MeasurementPreference != null)
                    hashCode = hashCode * 59 + this.MeasurementPreference.GetHashCode();
                if (this.Ftp != null)
                    hashCode = hashCode * 59 + this.Ftp.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Clubs != null)
                    hashCode = hashCode * 59 + this.Clubs.GetHashCode();
                if (this.Bikes != null)
                    hashCode = hashCode * 59 + this.Bikes.GetHashCode();
                if (this.Shoes != null)
                    hashCode = hashCode * 59 + this.Shoes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
