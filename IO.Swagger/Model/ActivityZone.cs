/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ActivityZone
    /// </summary>
    [DataContract]
    public partial class ActivityZone :  IEquatable<ActivityZone>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Heartrate for value: heartrate
            /// </summary>
            [EnumMember(Value = "heartrate")]
            Heartrate = 1,
            
            /// <summary>
            /// Enum Power for value: power
            /// </summary>
            [EnumMember(Value = "power")]
            Power = 2
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityZone" /> class.
        /// </summary>
        /// <param name="score">score.</param>
        /// <param name="distributionBuckets">distributionBuckets.</param>
        /// <param name="type">type.</param>
        /// <param name="sensorBased">sensorBased.</param>
        /// <param name="points">points.</param>
        /// <param name="customZones">customZones.</param>
        /// <param name="max">max.</param>
        public ActivityZone(int? score = default(int?), TimedZoneDistribution distributionBuckets = default(TimedZoneDistribution), TypeEnum? type = default(TypeEnum?), bool? sensorBased = default(bool?), int? points = default(int?), bool? customZones = default(bool?), int? max = default(int?))
        {
            this.Score = score;
            this.DistributionBuckets = distributionBuckets;
            this.Type = type;
            this.SensorBased = sensorBased;
            this.Points = points;
            this.CustomZones = customZones;
            this.Max = max;
        }
        
        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or Sets DistributionBuckets
        /// </summary>
        [DataMember(Name="distribution_buckets", EmitDefaultValue=false)]
        public TimedZoneDistribution DistributionBuckets { get; set; }


        /// <summary>
        /// Gets or Sets SensorBased
        /// </summary>
        [DataMember(Name="sensor_based", EmitDefaultValue=false)]
        public bool? SensorBased { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public int? Points { get; set; }

        /// <summary>
        /// Gets or Sets CustomZones
        /// </summary>
        [DataMember(Name="custom_zones", EmitDefaultValue=false)]
        public bool? CustomZones { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public int? Max { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityZone {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  DistributionBuckets: ").Append(DistributionBuckets).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SensorBased: ").Append(SensorBased).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  CustomZones: ").Append(CustomZones).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityZone);
        }

        /// <summary>
        /// Returns true if ActivityZone instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityZone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.DistributionBuckets == input.DistributionBuckets ||
                    (this.DistributionBuckets != null &&
                    this.DistributionBuckets.Equals(input.DistributionBuckets))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SensorBased == input.SensorBased ||
                    (this.SensorBased != null &&
                    this.SensorBased.Equals(input.SensorBased))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.CustomZones == input.CustomZones ||
                    (this.CustomZones != null &&
                    this.CustomZones.Equals(input.CustomZones))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.DistributionBuckets != null)
                    hashCode = hashCode * 59 + this.DistributionBuckets.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SensorBased != null)
                    hashCode = hashCode * 59 + this.SensorBased.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.CustomZones != null)
                    hashCode = hashCode * 59 + this.CustomZones.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
