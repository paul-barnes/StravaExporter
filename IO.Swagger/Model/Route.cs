/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Route
    /// </summary>
    [DataContract]
    public partial class Route :  IEquatable<Route>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Route" /> class.
        /// </summary>
        /// <param name="athlete">athlete.</param>
        /// <param name="description">The description of the route.</param>
        /// <param name="distance">The route&#39;s distance, in meters.</param>
        /// <param name="elevationGain">The route&#39;s elevation gain..</param>
        /// <param name="id">The unique identifier of this route.</param>
        /// <param name="map">map.</param>
        /// <param name="name">The name of this route.</param>
        /// <param name="_private">Whether this route is private.</param>
        /// <param name="starred">Whether this route is starred by the logged-in athlete.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="type">This route&#39;s type (1 for ride, 2 for runs).</param>
        /// <param name="subType">This route&#39;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed).</param>
        /// <param name="segments">The segments traversed by this route.</param>
        /// <param name="directions">The directions of this route.</param>
        public Route(SummaryAthlete athlete = default(SummaryAthlete), string description = default(string), float? distance = default(float?), float? elevationGain = default(float?), int? id = default(int?), PolylineMap map = default(PolylineMap), string name = default(string), bool? _private = default(bool?), bool? starred = default(bool?), int? timestamp = default(int?), int? type = default(int?), int? subType = default(int?), List<SummarySegment> segments = default(List<SummarySegment>), List<RouteDirection> directions = default(List<RouteDirection>))
        {
            this.Athlete = athlete;
            this.Description = description;
            this.Distance = distance;
            this.ElevationGain = elevationGain;
            this.Id = id;
            this.Map = map;
            this.Name = name;
            this.Private = _private;
            this.Starred = starred;
            this.Timestamp = timestamp;
            this.Type = type;
            this.SubType = subType;
            this.Segments = segments;
            this.Directions = directions;
        }
        
        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>
        [DataMember(Name="athlete", EmitDefaultValue=false)]
        public SummaryAthlete Athlete { get; set; }

        /// <summary>
        /// The description of the route
        /// </summary>
        /// <value>The description of the route</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The route&#39;s distance, in meters
        /// </summary>
        /// <value>The route&#39;s distance, in meters</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public float? Distance { get; set; }

        /// <summary>
        /// The route&#39;s elevation gain.
        /// </summary>
        /// <value>The route&#39;s elevation gain.</value>
        [DataMember(Name="elevation_gain", EmitDefaultValue=false)]
        public float? ElevationGain { get; set; }

        /// <summary>
        /// The unique identifier of this route
        /// </summary>
        /// <value>The unique identifier of this route</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name="map", EmitDefaultValue=false)]
        public PolylineMap Map { get; set; }

        /// <summary>
        /// The name of this route
        /// </summary>
        /// <value>The name of this route</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether this route is private
        /// </summary>
        /// <value>Whether this route is private</value>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool? Private { get; set; }

        /// <summary>
        /// Whether this route is starred by the logged-in athlete
        /// </summary>
        /// <value>Whether this route is starred by the logged-in athlete</value>
        [DataMember(Name="starred", EmitDefaultValue=false)]
        public bool? Starred { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// This route&#39;s type (1 for ride, 2 for runs)
        /// </summary>
        /// <value>This route&#39;s type (1 for ride, 2 for runs)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// This route&#39;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
        /// </summary>
        /// <value>This route&#39;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)</value>
        [DataMember(Name="sub_type", EmitDefaultValue=false)]
        public int? SubType { get; set; }

        /// <summary>
        /// The segments traversed by this route
        /// </summary>
        /// <value>The segments traversed by this route</value>
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public List<SummarySegment> Segments { get; set; }

        /// <summary>
        /// The directions of this route
        /// </summary>
        /// <value>The directions of this route</value>
        [DataMember(Name="directions", EmitDefaultValue=false)]
        public List<RouteDirection> Directions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Route {\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  ElevationGain: ").Append(ElevationGain).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Starred: ").Append(Starred).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  Directions: ").Append(Directions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Route);
        }

        /// <summary>
        /// Returns true if Route instances are equal
        /// </summary>
        /// <param name="input">Instance of Route to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Route input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Athlete == input.Athlete ||
                    (this.Athlete != null &&
                    this.Athlete.Equals(input.Athlete))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.ElevationGain == input.ElevationGain ||
                    (this.ElevationGain != null &&
                    this.ElevationGain.Equals(input.ElevationGain))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Map == input.Map ||
                    (this.Map != null &&
                    this.Map.Equals(input.Map))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.Starred == input.Starred ||
                    (this.Starred != null &&
                    this.Starred.Equals(input.Starred))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                ) && 
                (
                    this.Directions == input.Directions ||
                    this.Directions != null &&
                    this.Directions.SequenceEqual(input.Directions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Athlete != null)
                    hashCode = hashCode * 59 + this.Athlete.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.ElevationGain != null)
                    hashCode = hashCode * 59 + this.ElevationGain.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Map != null)
                    hashCode = hashCode * 59 + this.Map.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Private != null)
                    hashCode = hashCode * 59 + this.Private.GetHashCode();
                if (this.Starred != null)
                    hashCode = hashCode * 59 + this.Starred.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.Segments != null)
                    hashCode = hashCode * 59 + this.Segments.GetHashCode();
                if (this.Directions != null)
                    hashCode = hashCode * 59 + this.Directions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
