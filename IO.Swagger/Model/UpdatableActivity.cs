/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdatableActivity
    /// </summary>
    [DataContract]
    public partial class UpdatableActivity :  IEquatable<UpdatableActivity>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ActivityType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatableActivity" /> class.
        /// </summary>
        /// <param name="commute">Whether this activity is a commute.</param>
        /// <param name="trainer">Whether this activity was recorded on a training machine.</param>
        /// <param name="description">The description of the activity.</param>
        /// <param name="name">The name of the activity.</param>
        /// <param name="type">type.</param>
        /// <param name="gearId">Identifier for the gear associated with the activity. ‘none’ clears gear from activity.</param>
        public UpdatableActivity(bool? commute = default(bool?), bool? trainer = default(bool?), string description = default(string), string name = default(string), ActivityType? type = default(ActivityType?), string gearId = default(string))
        {
            this.Commute = commute;
            this.Trainer = trainer;
            this.Description = description;
            this.Name = name;
            this.Type = type;
            this.GearId = gearId;
        }
        
        /// <summary>
        /// Whether this activity is a commute
        /// </summary>
        /// <value>Whether this activity is a commute</value>
        [DataMember(Name="commute", EmitDefaultValue=false)]
        public bool? Commute { get; set; }

        /// <summary>
        /// Whether this activity was recorded on a training machine
        /// </summary>
        /// <value>Whether this activity was recorded on a training machine</value>
        [DataMember(Name="trainer", EmitDefaultValue=false)]
        public bool? Trainer { get; set; }

        /// <summary>
        /// The description of the activity
        /// </summary>
        /// <value>The description of the activity</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the activity
        /// </summary>
        /// <value>The name of the activity</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Identifier for the gear associated with the activity. ‘none’ clears gear from activity
        /// </summary>
        /// <value>Identifier for the gear associated with the activity. ‘none’ clears gear from activity</value>
        [DataMember(Name="gear_id", EmitDefaultValue=false)]
        public string GearId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatableActivity {\n");
            sb.Append("  Commute: ").Append(Commute).Append("\n");
            sb.Append("  Trainer: ").Append(Trainer).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  GearId: ").Append(GearId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatableActivity);
        }

        /// <summary>
        /// Returns true if UpdatableActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatableActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatableActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Commute == input.Commute ||
                    (this.Commute != null &&
                    this.Commute.Equals(input.Commute))
                ) && 
                (
                    this.Trainer == input.Trainer ||
                    (this.Trainer != null &&
                    this.Trainer.Equals(input.Trainer))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.GearId == input.GearId ||
                    (this.GearId != null &&
                    this.GearId.Equals(input.GearId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Commute != null)
                    hashCode = hashCode * 59 + this.Commute.GetHashCode();
                if (this.Trainer != null)
                    hashCode = hashCode * 59 + this.Trainer.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.GearId != null)
                    hashCode = hashCode * 59 + this.GearId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
