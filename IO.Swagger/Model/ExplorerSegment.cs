/* 
 * Strava API v3
 *
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExplorerSegment
    /// </summary>
    [DataContract]
    public partial class ExplorerSegment :  IEquatable<ExplorerSegment>, IValidatableObject
    {
        /// <summary>
        /// The description for the category of the climb
        /// </summary>
        /// <value>The description for the category of the climb</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClimbCategoryDescEnum
        {
            
            /// <summary>
            /// Enum NC for value: NC
            /// </summary>
            [EnumMember(Value = "NC")]
            NC = 1,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 2,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 4,
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 5,
            
            /// <summary>
            /// Enum HC for value: HC
            /// </summary>
            [EnumMember(Value = "HC")]
            HC = 6
        }

        /// <summary>
        /// The description for the category of the climb
        /// </summary>
        /// <value>The description for the category of the climb</value>
        [DataMember(Name="climb_category_desc", EmitDefaultValue=false)]
        public ClimbCategoryDescEnum? ClimbCategoryDesc { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExplorerSegment" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of this segment.</param>
        /// <param name="name">The name of this segment.</param>
        /// <param name="climbCategory">The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category &#x3D; 5, climb_category_desc &#x3D; HC. If climb_category &#x3D; 2, climb_category_desc &#x3D; 3..</param>
        /// <param name="climbCategoryDesc">The description for the category of the climb.</param>
        /// <param name="avgGrade">The segment&#39;s average grade, in percents.</param>
        /// <param name="startLatlng">startLatlng.</param>
        /// <param name="endLatlng">endLatlng.</param>
        /// <param name="elevDifference">The segments&#39;s evelation difference, in meters.</param>
        /// <param name="distance">The segment&#39;s distance, in meters.</param>
        /// <param name="points">The polyline of the segment.</param>
        public ExplorerSegment(long? id = default(long?), string name = default(string), int? climbCategory = default(int?), ClimbCategoryDescEnum? climbCategoryDesc = default(ClimbCategoryDescEnum?), float? avgGrade = default(float?), LatLng startLatlng = default(LatLng), LatLng endLatlng = default(LatLng), float? elevDifference = default(float?), float? distance = default(float?), string points = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.ClimbCategory = climbCategory;
            this.ClimbCategoryDesc = climbCategoryDesc;
            this.AvgGrade = avgGrade;
            this.StartLatlng = startLatlng;
            this.EndLatlng = endLatlng;
            this.ElevDifference = elevDifference;
            this.Distance = distance;
            this.Points = points;
        }
        
        /// <summary>
        /// The unique identifier of this segment
        /// </summary>
        /// <value>The unique identifier of this segment</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The name of this segment
        /// </summary>
        /// <value>The name of this segment</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category &#x3D; 5, climb_category_desc &#x3D; HC. If climb_category &#x3D; 2, climb_category_desc &#x3D; 3.
        /// </summary>
        /// <value>The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category &#x3D; 5, climb_category_desc &#x3D; HC. If climb_category &#x3D; 2, climb_category_desc &#x3D; 3.</value>
        [DataMember(Name="climb_category", EmitDefaultValue=false)]
        public int? ClimbCategory { get; set; }


        /// <summary>
        /// The segment&#39;s average grade, in percents
        /// </summary>
        /// <value>The segment&#39;s average grade, in percents</value>
        [DataMember(Name="avg_grade", EmitDefaultValue=false)]
        public float? AvgGrade { get; set; }

        /// <summary>
        /// Gets or Sets StartLatlng
        /// </summary>
        [DataMember(Name="start_latlng", EmitDefaultValue=false)]
        public LatLng StartLatlng { get; set; }

        /// <summary>
        /// Gets or Sets EndLatlng
        /// </summary>
        [DataMember(Name="end_latlng", EmitDefaultValue=false)]
        public LatLng EndLatlng { get; set; }

        /// <summary>
        /// The segments&#39;s evelation difference, in meters
        /// </summary>
        /// <value>The segments&#39;s evelation difference, in meters</value>
        [DataMember(Name="elev_difference", EmitDefaultValue=false)]
        public float? ElevDifference { get; set; }

        /// <summary>
        /// The segment&#39;s distance, in meters
        /// </summary>
        /// <value>The segment&#39;s distance, in meters</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public float? Distance { get; set; }

        /// <summary>
        /// The polyline of the segment
        /// </summary>
        /// <value>The polyline of the segment</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public string Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExplorerSegment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ClimbCategory: ").Append(ClimbCategory).Append("\n");
            sb.Append("  ClimbCategoryDesc: ").Append(ClimbCategoryDesc).Append("\n");
            sb.Append("  AvgGrade: ").Append(AvgGrade).Append("\n");
            sb.Append("  StartLatlng: ").Append(StartLatlng).Append("\n");
            sb.Append("  EndLatlng: ").Append(EndLatlng).Append("\n");
            sb.Append("  ElevDifference: ").Append(ElevDifference).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExplorerSegment);
        }

        /// <summary>
        /// Returns true if ExplorerSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of ExplorerSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExplorerSegment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ClimbCategory == input.ClimbCategory ||
                    (this.ClimbCategory != null &&
                    this.ClimbCategory.Equals(input.ClimbCategory))
                ) && 
                (
                    this.ClimbCategoryDesc == input.ClimbCategoryDesc ||
                    (this.ClimbCategoryDesc != null &&
                    this.ClimbCategoryDesc.Equals(input.ClimbCategoryDesc))
                ) && 
                (
                    this.AvgGrade == input.AvgGrade ||
                    (this.AvgGrade != null &&
                    this.AvgGrade.Equals(input.AvgGrade))
                ) && 
                (
                    this.StartLatlng == input.StartLatlng ||
                    (this.StartLatlng != null &&
                    this.StartLatlng.Equals(input.StartLatlng))
                ) && 
                (
                    this.EndLatlng == input.EndLatlng ||
                    (this.EndLatlng != null &&
                    this.EndLatlng.Equals(input.EndLatlng))
                ) && 
                (
                    this.ElevDifference == input.ElevDifference ||
                    (this.ElevDifference != null &&
                    this.ElevDifference.Equals(input.ElevDifference))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ClimbCategory != null)
                    hashCode = hashCode * 59 + this.ClimbCategory.GetHashCode();
                if (this.ClimbCategoryDesc != null)
                    hashCode = hashCode * 59 + this.ClimbCategoryDesc.GetHashCode();
                if (this.AvgGrade != null)
                    hashCode = hashCode * 59 + this.AvgGrade.GetHashCode();
                if (this.StartLatlng != null)
                    hashCode = hashCode * 59 + this.StartLatlng.GetHashCode();
                if (this.EndLatlng != null)
                    hashCode = hashCode * 59 + this.EndLatlng.GetHashCode();
                if (this.ElevDifference != null)
                    hashCode = hashCode * 59 + this.ElevDifference.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClimbCategory (int?) maximum
            if(this.ClimbCategory > (int?)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClimbCategory, must be a value less than or equal to 5.", new [] { "ClimbCategory" });
            }

            // ClimbCategory (int?) minimum
            if(this.ClimbCategory < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClimbCategory, must be a value greater than or equal to 0.", new [] { "ClimbCategory" });
            }

            yield break;
        }
    }

}
